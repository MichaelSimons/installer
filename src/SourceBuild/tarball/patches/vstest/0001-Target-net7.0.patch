From 9a5261a26ed651d79cb879277a118a77610e424c Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Tue, 16 Aug 2022 15:29:19 +0200
Subject: [PATCH 01/17] Added net7 support.

Backport: https://github.com/microsoft/vstest/pull/3944
---
 playground/MSTest1/MSTest1.csproj               |  2 +-
 samples/UnitTestProject/UnitTestProject.csproj  |  2 +-
 scripts/build.sh                                |  8 ++++----
 src/AttachVS/AttachVS.csproj                    |  2 +-
 .../DumpMinitool.arm64.csproj                   |  4 ++--
 .../DumpMinitool.x86/DumpMinitool.x86.csproj    |  4 ++--
 .../DumpMinitool/DumpMinitool.csproj            |  4 ++--
 ...Platform.Extensions.EventLogCollector.csproj |  6 +++---
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 ...crosoft.TestPlatform.AdapterUtilities.csproj |  4 ++--
 .../Microsoft.TestPlatform.Build.csproj         |  4 ++--
 .../Microsoft.TestPlatform.Client.csproj        |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 .../Microsoft.TestPlatform.Common.csproj        |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 ...t.TestPlatform.CommunicationUtilities.csproj |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 .../Microsoft.TestPlatform.CoreUtilities.csproj |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      | 13 +++++++++++++
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 ...icrosoft.TestPlatform.CrossPlatEngine.csproj |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 ...latform.Extensions.BlameDataCollector.csproj |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 ...ft.TestPlatform.Extensions.HtmlLogger.csproj |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 ...oft.TestPlatform.Extensions.TrxLogger.csproj |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 .../Microsoft.TestPlatform.ObjectModel.csproj   |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  4 ++++
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 ...oft.TestPlatform.PlatformAbstractions.csproj |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      | 17 +++++++++++++++++
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 ...crosoft.TestPlatform.TestHostProvider.csproj |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 .../Microsoft.TestPlatform.Utilities.csproj     |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 ...atform.VsTestConsole.TranslationLayer.csproj |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 src/SettingsMigrator/SettingsMigrator.csproj    |  4 ++--
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 src/datacollector/datacollector.csproj          |  3 ++-
 .../nuspec/Microsoft.TestPlatform.Build.csproj  |  2 +-
 .../nuspec/Microsoft.TestPlatform.CLI.csproj    |  2 +-
 src/package/package/package.csproj              |  2 +-
 src/testhost.arm64/testhost.arm64.csproj        |  6 +++---
 src/testhost.x86/testhost.x86.csproj            |  6 +++---
 src/testhost/testhost.csproj                    |  6 +++---
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      |  1 +
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 +
 src/vstest.console/vstest.console.csproj        |  4 ++--
 .../ArchitectureSwitch.csproj                   |  4 ++--
 test/TestAssets/Tools/Tools.csproj              |  2 +-
 test/TestAssets/child-crash/child-crash.csproj  |  2 +-
 test/TestAssets/child-hang/child-hang.csproj    |  2 +-
 test/TestAssets/crash/crash.csproj              |  2 +-
 .../hanging-child/hanging-child.csproj          |  2 +-
 .../Perfy.TestAdapter/Perfy.TestAdapter.csproj  |  2 +-
 .../problematic-child/problematic-child.csproj  |  2 +-
 test/TestAssets/timeout/timeout.csproj          |  2 +-
 73 files changed, 137 insertions(+), 73 deletions(-)
 create mode 100644 src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Client/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Client/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Common/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Common/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.CommunicationUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.CommunicationUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.CrossPlatEngine/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.CrossPlatEngine/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Extensions.HtmlLogger/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Extensions.HtmlLogger/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Extensions.TrxLogger/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Extensions.TrxLogger/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.ObjectModel/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.ObjectModel/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.TestHostProvider/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.TestHostProvider/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Utilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.Utilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/datacollector/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/datacollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt
 create mode 100644 src/vstest.console/PublicAPI/net7.0/PublicAPI.Shipped.txt
 create mode 100644 src/vstest.console/PublicAPI/net7.0/PublicAPI.Unshipped.txt

diff --git a/playground/MSTest1/MSTest1.csproj b/playground/MSTest1/MSTest1.csproj
index 2f0ced5017..1ffb127333 100644
--- a/playground/MSTest1/MSTest1.csproj
+++ b/playground/MSTest1/MSTest1.csproj
@@ -6,7 +6,7 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
 
   <PropertyGroup>
-    <TargetFrameworks>$(TargetFrameworks);net472;net5.0</TargetFrameworks>
+    <TargetFrameworks>$(TargetFrameworks);net472;net5.0;net6.0;net7.0</TargetFrameworks>
     <Prefer32Bit>false</Prefer32Bit>
     <IsPackable>false</IsPackable>
   </PropertyGroup>
diff --git a/samples/UnitTestProject/UnitTestProject.csproj b/samples/UnitTestProject/UnitTestProject.csproj
index 06b3b010e9..30d3885a17 100644
--- a/samples/UnitTestProject/UnitTestProject.csproj
+++ b/samples/UnitTestProject/UnitTestProject.csproj
@@ -2,7 +2,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
   <Import Project="..\..\scripts\build\TestPlatform.Dependencies.props" />
   <PropertyGroup>
-    <TargetFrameworks>$(TargetNetFxVersion);$(TargetNetCoreVersion)</TargetFrameworks>
+    <TargetFrameworks>$(TargetNetFxVersion);$(TargetNetCoreVersion);net7.0;net6.0;</TargetFrameworks>
     <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">$(TargetNetCoreVersion)</TargetFrameworks>
     <OutputType Condition=" '$(TargetFramework)' != '$(TargetNetFxVersion)' ">Exe</OutputType>
     <AssemblyName>UnitTestProject</AssemblyName>
diff --git a/scripts/build.sh b/scripts/build.sh
index 066a6eef0f..01140550a1 100755
--- a/scripts/build.sh
+++ b/scripts/build.sh
@@ -156,7 +156,7 @@ TPB_BRANCH="$(git -C "." rev-parse --abbrev-ref HEAD 2>/dev/null)" || TPB_BRANCH
 TPB_COMMIT="$(git -C "." rev-parse HEAD 2>/dev/null)"              || TPB_COMMIT="LOCALBUILD" # detached HEAD
 
 if [[ $TP_USE_REPO_API = 1 ]]; then
-    TPB_TargetFrameworkCore="net6.0"
+    TPB_TargetFrameworkCore="net7.0"
 fi
 
 #
@@ -346,8 +346,8 @@ function publish_package()
             cp -r src/testhost/bin/$TPB_Configuration/$TPB_TargetFramework/win7-x64/* $testhost
             cp -r src/testhost.x86/bin/$TPB_Configuration/$TPB_TargetFramework/win7-x86/* $testhost
         else
-            cp -r src/testhost/bin/$TPB_Configuration/net6.0/* $testhost
-            cp -r src/testhost.x86/bin/$TPB_Configuration/net6.0/* $testhost
+            cp -r src/testhost/bin/$TPB_Configuration/net7.0/* $testhost
+            cp -r src/testhost.x86/bin/$TPB_Configuration/net7.0/* $testhost
         fi
 
         # Copy over the logger assemblies to the Extensions folder.
@@ -355,7 +355,7 @@ function publish_package()
 
         if [[ $TP_USE_REPO_API = 1 ]]; then
             log ".. Package: mv (Source Build)"
-            local current_tfn="net6.0"
+            local current_tfn="net7.0"
         else
             log ".. Package: mv"
             local current_tfn="netstandard2.0"
diff --git a/src/AttachVS/AttachVS.csproj b/src/AttachVS/AttachVS.csproj
index 69b747e2a9..37fcc745f1 100644
--- a/src/AttachVS/AttachVS.csproj
+++ b/src/AttachVS/AttachVS.csproj
@@ -7,7 +7,7 @@
 
   <PropertyGroup>
     <OutputType>Exe</OutputType>
-    <TargetFrameworks>net472</TargetFrameworks>
+    <TargetFrameworks>net7;net472</TargetFrameworks>
     <AssemblyName>AttachVS</AssemblyName>
   </PropertyGroup>
   <ItemGroup>
diff --git a/src/DataCollectors/DumpMinitool.arm64/DumpMinitool.arm64.csproj b/src/DataCollectors/DumpMinitool.arm64/DumpMinitool.arm64.csproj
index f571dc4af9..d206b4ff00 100644
--- a/src/DataCollectors/DumpMinitool.arm64/DumpMinitool.arm64.csproj
+++ b/src/DataCollectors/DumpMinitool.arm64/DumpMinitool.arm64.csproj
@@ -6,8 +6,8 @@
   </PropertyGroup>
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
-    <TargetFrameworks>$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <PlatformTarget>AnyCPU</PlatformTarget>
     <Prefer32Bit>false</Prefer32Bit>
     <OutputType>Exe</OutputType>
diff --git a/src/DataCollectors/DumpMinitool.x86/DumpMinitool.x86.csproj b/src/DataCollectors/DumpMinitool.x86/DumpMinitool.x86.csproj
index d640b294fc..a7ff13ab40 100644
--- a/src/DataCollectors/DumpMinitool.x86/DumpMinitool.x86.csproj
+++ b/src/DataCollectors/DumpMinitool.x86/DumpMinitool.x86.csproj
@@ -6,8 +6,8 @@
   </PropertyGroup>
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
-    <TargetFrameworks>$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <PlatformTarget>AnyCPU</PlatformTarget>
     <Prefer32Bit>true</Prefer32Bit>
     <OutputType>Exe</OutputType>
diff --git a/src/DataCollectors/DumpMinitool/DumpMinitool.csproj b/src/DataCollectors/DumpMinitool/DumpMinitool.csproj
index ae03c84fcf..61b77b74af 100644
--- a/src/DataCollectors/DumpMinitool/DumpMinitool.csproj
+++ b/src/DataCollectors/DumpMinitool/DumpMinitool.csproj
@@ -6,8 +6,8 @@
   </PropertyGroup>
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
-    <TargetFrameworks>$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <PlatformTarget>AnyCPU</PlatformTarget>
     <Prefer32Bit>false</Prefer32Bit>
     <OutputType>Exe</OutputType>
diff --git a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/Microsoft.TestPlatform.Extensions.EventLogCollector.csproj b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/Microsoft.TestPlatform.Extensions.EventLogCollector.csproj
index e63a69b94a..6247d42b27 100644
--- a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/Microsoft.TestPlatform.Extensions.EventLogCollector.csproj
+++ b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/Microsoft.TestPlatform.Extensions.EventLogCollector.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.TestPlatform.Extensions.EventLogCollector</AssemblyName>
-    <TargetFrameworks>$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
     <UseBannedApiAnalyzers>true</UseBannedApiAnalyzers>
   </PropertyGroup>
@@ -17,7 +17,7 @@
     <Reference Include="Microsoft.CSharp" />
     <Reference Include="System.Xml" />
   </ItemGroup>
-  <ItemGroup Condition="'$(TargetFramework)' == 'net6.0'">
+  <ItemGroup Condition="'$(TargetFramework)' == 'net6.0' or '$(TargetFramework)' == 'net7.0'">
     <PackageReference Include="System.Diagnostics.EventLog" Version="5.0.0" />
   </ItemGroup>
   <ItemGroup>
diff --git a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.AdapterUtilities/Microsoft.TestPlatform.AdapterUtilities.csproj b/src/Microsoft.TestPlatform.AdapterUtilities/Microsoft.TestPlatform.AdapterUtilities.csproj
index ed46d7cd29..f12bef2853 100644
--- a/src/Microsoft.TestPlatform.AdapterUtilities/Microsoft.TestPlatform.AdapterUtilities.csproj
+++ b/src/Microsoft.TestPlatform.AdapterUtilities/Microsoft.TestPlatform.AdapterUtilities.csproj
@@ -5,9 +5,9 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks>net6.0;net7.0;netstandard1.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
     <TargetFrameworks Condition=" '$(OS)' == 'Windows_NT' ">$(TargetFrameworks);uap10.0</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <AssemblyName>Microsoft.TestPlatform.AdapterUtilities</AssemblyName>
     <RootNamespace>Microsoft.TestPlatform.AdapterUtilities</RootNamespace>
   </PropertyGroup>
diff --git a/src/Microsoft.TestPlatform.Build/Microsoft.TestPlatform.Build.csproj b/src/Microsoft.TestPlatform.Build/Microsoft.TestPlatform.Build.csproj
index 10857dfd35..7abfd2e6fd 100644
--- a/src/Microsoft.TestPlatform.Build/Microsoft.TestPlatform.Build.csproj
+++ b/src/Microsoft.TestPlatform.Build/Microsoft.TestPlatform.Build.csproj
@@ -7,8 +7,8 @@
   <PropertyGroup>
     <NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion>
     <AssemblyName>Microsoft.TestPlatform.Build</AssemblyName>
-    <TargetFrameworks>netstandard2.0</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
     <UseBannedApiAnalyzers>true</UseBannedApiAnalyzers>
   </PropertyGroup>
diff --git a/src/Microsoft.TestPlatform.Client/Microsoft.TestPlatform.Client.csproj b/src/Microsoft.TestPlatform.Client/Microsoft.TestPlatform.Client.csproj
index b37d45bed0..628557e922 100644
--- a/src/Microsoft.TestPlatform.Client/Microsoft.TestPlatform.Client.csproj
+++ b/src/Microsoft.TestPlatform.Client/Microsoft.TestPlatform.Client.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.VisualStudio.TestPlatform.Client</AssemblyName>
-    <TargetFrameworks>netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
   </PropertyGroup>
   <ItemGroup>
diff --git a/src/Microsoft.TestPlatform.Client/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.Client/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Client/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Client/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.Client/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Client/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Common/Microsoft.TestPlatform.Common.csproj b/src/Microsoft.TestPlatform.Common/Microsoft.TestPlatform.Common.csproj
index 1657dcba1c..68fa590c11 100644
--- a/src/Microsoft.TestPlatform.Common/Microsoft.TestPlatform.Common.csproj
+++ b/src/Microsoft.TestPlatform.Common/Microsoft.TestPlatform.Common.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.VisualStudio.TestPlatform.Common</AssemblyName>
-    <TargetFrameworks>net6.0;netstandard2.0;netstandard1.3;$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;netstandard2.0;netstandard1.3;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
     <UseBannedApiAnalyzers>true</UseBannedApiAnalyzers>
   </PropertyGroup>
diff --git a/src/Microsoft.TestPlatform.Common/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.Common/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Common/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Common/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.Common/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Common/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.CommunicationUtilities/Microsoft.TestPlatform.CommunicationUtilities.csproj b/src/Microsoft.TestPlatform.CommunicationUtilities/Microsoft.TestPlatform.CommunicationUtilities.csproj
index 422c75a4cf..b3bbdaf570 100644
--- a/src/Microsoft.TestPlatform.CommunicationUtilities/Microsoft.TestPlatform.CommunicationUtilities.csproj
+++ b/src/Microsoft.TestPlatform.CommunicationUtilities/Microsoft.TestPlatform.CommunicationUtilities.csproj
@@ -5,8 +5,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.TestPlatform.CommunicationUtilities</AssemblyName>
-    <TargetFrameworks>net6.0;netstandard2.0;netstandard1.3;$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;netstandard2.0;netstandard1.3;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
   </PropertyGroup>
   <ItemGroup>
diff --git a/src/Microsoft.TestPlatform.CommunicationUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.CommunicationUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.CommunicationUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.CommunicationUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.CommunicationUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.CommunicationUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.CoreUtilities/Microsoft.TestPlatform.CoreUtilities.csproj b/src/Microsoft.TestPlatform.CoreUtilities/Microsoft.TestPlatform.CoreUtilities.csproj
index ab410d21d1..bf8cea140e 100644
--- a/src/Microsoft.TestPlatform.CoreUtilities/Microsoft.TestPlatform.CoreUtilities.csproj
+++ b/src/Microsoft.TestPlatform.CoreUtilities/Microsoft.TestPlatform.CoreUtilities.csproj
@@ -6,10 +6,10 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.TestPlatform.CoreUtilities</AssemblyName>
-    <TargetFrameworks>net6.0;netstandard2.0;netstandard1.3;$(TargetNetFxVersion);$(TargetNetCoreVersion)</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;netstandard2.0;netstandard1.3;$(TargetNetFxVersion);$(TargetNetCoreVersion)</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
     <TargetFrameworks Condition="'$(OS)' == 'Windows_NT'">$(TargetFrameworks);uap10.0;netstandard1.0</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
   </PropertyGroup>
   <PropertyGroup Condition="'$(TargetFramework)' == 'uap10.0'">
     <CopyLocalLockFileAssemblies>false</CopyLocalLockFileAssemblies>
diff --git a/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..dc4f1b293a
--- /dev/null
+++ b/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1,13 @@
+﻿#nullable enable
+Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput
+Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.Write(string? message, Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel level) -> void
+Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.WriteLine(string? message, Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel level) -> void
+Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions
+static Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.TraceLevel.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel
+static Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.TraceLevel.set -> void
+static Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.Instance.get -> Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput!
+static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Error(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, bool appendPrefix, string! format, params object?[]? args) -> void
+static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Information(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, bool appendPrefix, string! format, params object?[]? args) -> void
+static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Information(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, bool appendPrefix, System.ConsoleColor foregroundColor, string! format, params object?[]? args) -> void
+static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Warning(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, bool appendPrefix, string! format, params object?[]? args) -> void
+static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Write(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, string! message, Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel level, System.ConsoleColor foregroundColor) -> void
diff --git a/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..ab058de62d
--- /dev/null
+++ b/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+﻿#nullable enable
diff --git a/src/Microsoft.TestPlatform.CrossPlatEngine/Microsoft.TestPlatform.CrossPlatEngine.csproj b/src/Microsoft.TestPlatform.CrossPlatEngine/Microsoft.TestPlatform.CrossPlatEngine.csproj
index 1f746ac353..bf3772f173 100644
--- a/src/Microsoft.TestPlatform.CrossPlatEngine/Microsoft.TestPlatform.CrossPlatEngine.csproj
+++ b/src/Microsoft.TestPlatform.CrossPlatEngine/Microsoft.TestPlatform.CrossPlatEngine.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.TestPlatform.CrossPlatEngine</AssemblyName>
-    <TargetFrameworks>net6.0;netstandard2.0;netstandard1.3;$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;netstandard2.0;netstandard1.3;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
   </PropertyGroup>
   <ItemGroup>
diff --git a/src/Microsoft.TestPlatform.CrossPlatEngine/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.CrossPlatEngine/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.CrossPlatEngine/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.CrossPlatEngine/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.CrossPlatEngine/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.CrossPlatEngine/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Microsoft.TestPlatform.Extensions.BlameDataCollector.csproj b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Microsoft.TestPlatform.Extensions.BlameDataCollector.csproj
index 54847933a7..71d6303652 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Microsoft.TestPlatform.Extensions.BlameDataCollector.csproj
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Microsoft.TestPlatform.Extensions.BlameDataCollector.csproj
@@ -18,8 +18,8 @@
   </PropertyGroup>
   <PropertyGroup>
     <AssemblyName>Microsoft.TestPlatform.Extensions.BlameDataCollector</AssemblyName>
-    <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;netstandard2.0;net472</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
     <!-- to copy the netcore.client dependency to bin folder on build -->
     <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Extensions.HtmlLogger/Microsoft.TestPlatform.Extensions.HtmlLogger.csproj b/src/Microsoft.TestPlatform.Extensions.HtmlLogger/Microsoft.TestPlatform.Extensions.HtmlLogger.csproj
index 31b103cb77..935cd5af48 100644
--- a/src/Microsoft.TestPlatform.Extensions.HtmlLogger/Microsoft.TestPlatform.Extensions.HtmlLogger.csproj
+++ b/src/Microsoft.TestPlatform.Extensions.HtmlLogger/Microsoft.TestPlatform.Extensions.HtmlLogger.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.VisualStudio.TestPlatform.Extensions.Html.TestLogger</AssemblyName>
-    <TargetFrameworks>netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
     <UseBannedApiAnalyzers>true</UseBannedApiAnalyzers>
   </PropertyGroup>
diff --git a/src/Microsoft.TestPlatform.Extensions.HtmlLogger/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.Extensions.HtmlLogger/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Extensions.HtmlLogger/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Extensions.HtmlLogger/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.Extensions.HtmlLogger/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Extensions.HtmlLogger/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Extensions.TrxLogger/Microsoft.TestPlatform.Extensions.TrxLogger.csproj b/src/Microsoft.TestPlatform.Extensions.TrxLogger/Microsoft.TestPlatform.Extensions.TrxLogger.csproj
index 16e5eda699..95b58f7d57 100644
--- a/src/Microsoft.TestPlatform.Extensions.TrxLogger/Microsoft.TestPlatform.Extensions.TrxLogger.csproj
+++ b/src/Microsoft.TestPlatform.Extensions.TrxLogger/Microsoft.TestPlatform.Extensions.TrxLogger.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.VisualStudio.TestPlatform.Extensions.Trx.TestLogger</AssemblyName>
-    <TargetFrameworks>net6.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
   </PropertyGroup>
   <ItemGroup>
diff --git a/src/Microsoft.TestPlatform.Extensions.TrxLogger/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.Extensions.TrxLogger/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Extensions.TrxLogger/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Extensions.TrxLogger/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.Extensions.TrxLogger/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Extensions.TrxLogger/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.ObjectModel/Microsoft.TestPlatform.ObjectModel.csproj b/src/Microsoft.TestPlatform.ObjectModel/Microsoft.TestPlatform.ObjectModel.csproj
index 08ca15093b..d355a6a502 100644
--- a/src/Microsoft.TestPlatform.ObjectModel/Microsoft.TestPlatform.ObjectModel.csproj
+++ b/src/Microsoft.TestPlatform.ObjectModel/Microsoft.TestPlatform.ObjectModel.csproj
@@ -6,9 +6,9 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.VisualStudio.TestPlatform.ObjectModel</AssemblyName>
-    <TargetFrameworks>$(TargetNetFxVersion);$(TargetNetCoreVersion);netstandard2.0;netstandard1.3</TargetFrameworks>
+    <TargetFrameworks>net7.0;$(TargetNetFxVersion);$(TargetNetCoreVersion);netstandard2.0;netstandard1.3</TargetFrameworks>
     <TargetFrameworks Condition="'$(OS)' == 'Windows_NT'">$(TargetFrameworks);uap10.0;netstandard1.0</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <PackageId>Microsoft.TestPlatform.ObjectModel</PackageId>
   </PropertyGroup>
   <PropertyGroup Condition="'$(TargetFramework)' == 'uap10.0'">
diff --git a/src/Microsoft.TestPlatform.ObjectModel/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.ObjectModel/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..2ceb9ba877
--- /dev/null
+++ b/src/Microsoft.TestPlatform.ObjectModel/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1,4 @@
+﻿#nullable enable
+static Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.TraceLevel.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel (forwarded, contained in Microsoft.TestPlatform.CoreUtilities)
+static Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.TraceLevel.set -> void (forwarded, contained in Microsoft.TestPlatform.CoreUtilities)
+static Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework.DefaultFramework.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework!
diff --git a/src/Microsoft.TestPlatform.ObjectModel/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.ObjectModel/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..ab058de62d
--- /dev/null
+++ b/src/Microsoft.TestPlatform.ObjectModel/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+﻿#nullable enable
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/Microsoft.TestPlatform.PlatformAbstractions.csproj b/src/Microsoft.TestPlatform.PlatformAbstractions/Microsoft.TestPlatform.PlatformAbstractions.csproj
index b87db8e4d5..5c4257aeb5 100644
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/Microsoft.TestPlatform.PlatformAbstractions.csproj
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/Microsoft.TestPlatform.PlatformAbstractions.csproj
@@ -7,9 +7,9 @@
   <PropertyGroup>
     <AssemblyName>Microsoft.TestPlatform.PlatformAbstractions</AssemblyName>
     <RootNamespace>Microsoft.TestPlatform.PlatformAbstractions</RootNamespace>
-    <TargetFrameworks>$(TargetNetFxVersion);$(TargetNetCoreVersion);netstandard1.3;netstandard2.0;net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;$(TargetNetFxVersion);$(TargetNetCoreVersion);netstandard1.3;netstandard2.0;net6.0</TargetFrameworks>
     <TargetFrameworks Condition="'$(OS)' == 'Windows_NT'">$(TargetFrameworks);uap10.0;netstandard1.0</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
     <NoWarn>$(NoWarn);NU1605</NoWarn>
   </PropertyGroup>
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..d17adb2a82
--- /dev/null
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1,17 @@
+﻿#nullable enable
+Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.InitializeTrace(string? customLogFile, Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel platformTraceLevel) -> bool
+Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.MapPlatformTraceToTrace(Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel traceLevel) -> System.Diagnostics.TraceLevel
+Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.WriteLine(Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel level, string? message) -> void
+Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener
+Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.RollingFileTraceListener(string! fileName, string! name, int rollSizeKB) -> void
+Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformAssemblyResolver.~PlatformAssemblyResolver() -> void
+Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformThread.Run(System.Action? action, Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformApartmentState apartmentState, bool waitForCompletion) -> void
+Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.LaunchProcess(string! processPath, string? arguments, string? workingDirectory, System.Collections.Generic.IDictionary<string!, string?>? envVariables, System.Action<object?, string?>? errorCallback, System.Action<object?>? exitCallBack, System.Action<object?, string?>? outputCallBack) -> object!
+Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.SetExitCallback(int processId, System.Action<object?>? callbackAction) -> void
+Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessStartInfoExtensions
+override Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.Dispose(bool disposing) -> void
+override Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.WriteLine(string? message) -> void
+static Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.LogFile.get -> string?
+static Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.TraceLevel.get -> System.Diagnostics.TraceLevel
+static Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.TraceLevel.set -> void
+static Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessStartInfoExtensions.AddEnvironmentVariable(this System.Diagnostics.ProcessStartInfo! startInfo, string! name, string? value) -> void
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..ab058de62d
--- /dev/null
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+﻿#nullable enable
diff --git a/src/Microsoft.TestPlatform.TestHostProvider/Microsoft.TestPlatform.TestHostProvider.csproj b/src/Microsoft.TestPlatform.TestHostProvider/Microsoft.TestPlatform.TestHostProvider.csproj
index b1a10b8ac4..7e25baa267 100644
--- a/src/Microsoft.TestPlatform.TestHostProvider/Microsoft.TestPlatform.TestHostProvider.csproj
+++ b/src/Microsoft.TestPlatform.TestHostProvider/Microsoft.TestPlatform.TestHostProvider.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.TestPlatform.TestHostRuntimeProvider</AssemblyName>
-    <TargetFrameworks>net6.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <DefineConstants Condition=" '$(DotNetBuildFromSource)' == 'true' ">$(DefineConstants);DOTNET_BUILD_FROM_SOURCE</DefineConstants>
     <IsTestProject>false</IsTestProject>
     <UseBannedApiAnalyzers>true</UseBannedApiAnalyzers>
diff --git a/src/Microsoft.TestPlatform.TestHostProvider/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.TestHostProvider/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.TestHostProvider/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.TestHostProvider/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.TestHostProvider/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.TestHostProvider/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Utilities/Microsoft.TestPlatform.Utilities.csproj b/src/Microsoft.TestPlatform.Utilities/Microsoft.TestPlatform.Utilities.csproj
index f481890916..a4e4253a8e 100644
--- a/src/Microsoft.TestPlatform.Utilities/Microsoft.TestPlatform.Utilities.csproj
+++ b/src/Microsoft.TestPlatform.Utilities/Microsoft.TestPlatform.Utilities.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.TestPlatform.Utilities</AssemblyName>
-    <TargetFrameworks>netstandard2.0;netstandard1.3;$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;netstandard2.0;netstandard1.3;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
   </PropertyGroup>
   <ItemGroup Condition="'$(TargetFramework)' == '$(TargetNetFxVersion)' ">
diff --git a/src/Microsoft.TestPlatform.Utilities/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.Utilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Utilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.Utilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.Utilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.Utilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/Microsoft.TestPlatform.VsTestConsole.TranslationLayer.csproj b/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/Microsoft.TestPlatform.VsTestConsole.TranslationLayer.csproj
index 604fd9e646..42db158dc2 100644
--- a/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/Microsoft.TestPlatform.VsTestConsole.TranslationLayer.csproj
+++ b/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/Microsoft.TestPlatform.VsTestConsole.TranslationLayer.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>Microsoft.TestPlatform.VsTestConsole.TranslationLayer</AssemblyName>
-    <TargetFrameworks>net6.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;netstandard2.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
   </PropertyGroup>
   <PropertyGroup>
diff --git a/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/Microsoft.TestPlatform.VsTestConsole.TranslationLayer/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/SettingsMigrator/SettingsMigrator.csproj b/src/SettingsMigrator/SettingsMigrator.csproj
index 82f634edfc..ab06081b04 100644
--- a/src/SettingsMigrator/SettingsMigrator.csproj
+++ b/src/SettingsMigrator/SettingsMigrator.csproj
@@ -6,8 +6,8 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>SettingsMigrator</AssemblyName>
-    <TargetFrameworks>$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;$(TargetNetFxVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <OutputType>Exe</OutputType>
     <PlatformTarget>AnyCPU</PlatformTarget>
     <IsTestProject>false</IsTestProject>
diff --git a/src/datacollector/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/datacollector/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/datacollector/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/datacollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/datacollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/datacollector/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/datacollector/datacollector.csproj b/src/datacollector/datacollector.csproj
index 7a6bf8e0f8..88b2c2557a 100644
--- a/src/datacollector/datacollector.csproj
+++ b/src/datacollector/datacollector.csproj
@@ -14,7 +14,8 @@
     <TargetFrameworks>$(TargetNetCoreVersion)</TargetFrameworks>
     <TargetFrameworks Condition=" '$(OS)' == 'WINDOWS_NT' ">$(TargetFrameworks);net472</TargetFrameworks>
     <TargetFrameworks Condition=" '$(OS)' != 'WINDOWS_NT' ">$(TargetFrameworks);$(TargetNetFxVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>$(TargetFrameworks);net7.0;net6.0;</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <PlatformTarget Condition=" $(TargetFramework.StartsWith('net4')) AND '$(RuntimeIdentifier)' == '' ">AnyCPU</PlatformTarget>
     <OutputType>Exe</OutputType>
     <RollForward>Major</RollForward>
diff --git a/src/package/nuspec/Microsoft.TestPlatform.Build.csproj b/src/package/nuspec/Microsoft.TestPlatform.Build.csproj
index 6f3480e8ab..909ce2c73c 100644
--- a/src/package/nuspec/Microsoft.TestPlatform.Build.csproj
+++ b/src/package/nuspec/Microsoft.TestPlatform.Build.csproj
@@ -2,7 +2,7 @@
   <PropertyGroup>
     <OutputType>Exe</OutputType>
     <TargetFramework Condition=" '$(DotNetBuildFromSource)' != 'true' ">netstandard2.0</TargetFramework>
-    <TargetFramework Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFramework>
+    <TargetFramework Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFramework>
     <CheckEolTargetFramework>false</CheckEolTargetFramework>
     <NuspecFile>TestPlatform.Build.nuspec</NuspecFile>
     <NuspecProperties>BranchName=$(BranchName);CommitId=$(CommitId);Version=$(Version);TargetFramework=$(TargetFramework)</NuspecProperties>
diff --git a/src/package/nuspec/Microsoft.TestPlatform.CLI.csproj b/src/package/nuspec/Microsoft.TestPlatform.CLI.csproj
index db9fbdba03..852b7e97cd 100644
--- a/src/package/nuspec/Microsoft.TestPlatform.CLI.csproj
+++ b/src/package/nuspec/Microsoft.TestPlatform.CLI.csproj
@@ -2,7 +2,7 @@
   <PropertyGroup>
     <OutputType>Exe</OutputType>
     <TargetFramework Condition=" '$(DotNetBuildFromSource)' != 'true' ">$(TargetNetCoreVersion)</TargetFramework>
-    <TargetFramework Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFramework>
+    <TargetFramework Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFramework>
     <CheckEolTargetFramework>false</CheckEolTargetFramework>
     <NuspecFile>TestPlatform.CLI.nuspec</NuspecFile>
     <NuspecProperties>BranchName=$(BranchName);CommitId=$(CommitId);Version=$(Version);TargetFramework=$(TargetFramework)</NuspecProperties>
diff --git a/src/package/package/package.csproj b/src/package/package/package.csproj
index 9ec1f8e390..0ad3344694 100644
--- a/src/package/package/package.csproj
+++ b/src/package/package/package.csproj
@@ -6,7 +6,7 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <TargetFrameworks>$(TargetNetFxVersion);$(TargetNetCoreVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0</TargetFrameworks>
     <AssemblyName>package</AssemblyName>
     <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
     <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>
diff --git a/src/testhost.arm64/testhost.arm64.csproj b/src/testhost.arm64/testhost.arm64.csproj
index b23e53ecbb..a6f863b722 100644
--- a/src/testhost.arm64/testhost.arm64.csproj
+++ b/src/testhost.arm64/testhost.arm64.csproj
@@ -11,13 +11,13 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>testhost.arm64</AssemblyName>
-    <TargetFrameworks>$(TargetNetCoreVersion);$(TargetNetFxVersion);net47;net471;net472;net48</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;$(TargetNetCoreVersion);$(TargetNetFxVersion);net47;net471;net472;net48</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <OutputType>Exe</OutputType>
     <IsTestProject>false</IsTestProject>
     <ApplicationManifest>app.manifest</ApplicationManifest>
   </PropertyGroup>
-  <PropertyGroup Condition="'$(TargetFramework)' != '$(TargetNetCoreVersion)' AND '$(TargetFramework)' != 'net6.0' ">
+  <PropertyGroup Condition="'$(TargetFramework)' != '$(TargetNetCoreVersion)' AND '$(TargetFramework)' != 'net6.0' AND '$(TargetFramework)' != 'net7.0' ">
     <RuntimeIdentifier Condition="'$(DotNetBuildFromSource)' != 'true'">win10-arm64</RuntimeIdentifier>
     <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
     <TargetName Condition="'$(TargetFramework)' != '$(TargetNetFxVersion)'">$(AssemblyName.Replace('.arm64', '')).$(TargetFramework).arm64</TargetName>
diff --git a/src/testhost.x86/testhost.x86.csproj b/src/testhost.x86/testhost.x86.csproj
index b14f562d5b..440075d394 100644
--- a/src/testhost.x86/testhost.x86.csproj
+++ b/src/testhost.x86/testhost.x86.csproj
@@ -11,15 +11,15 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>testhost.x86</AssemblyName>
-    <TargetFrameworks>$(TargetNetCoreVersion);$(TargetNetFxVersion);net47;net471;net472;net48</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;$(TargetNetCoreVersion);$(TargetNetFxVersion);net47;net471;net472;net48</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <PlatformTarget>AnyCPU</PlatformTarget>
     <Prefer32Bit>true</Prefer32Bit>
     <OutputType>Exe</OutputType>
     <IsTestProject>false</IsTestProject>
     <ApplicationManifest>app.manifest</ApplicationManifest>
   </PropertyGroup>
-  <PropertyGroup Condition="'$(TargetFramework)' != '$(TargetNetCoreVersion)' AND '$(TargetFramework)' != 'net6.0' ">
+  <PropertyGroup Condition="'$(TargetFramework)' != '$(TargetNetCoreVersion)' AND '$(TargetFramework)' != 'net6.0' AND '$(TargetFramework)' != 'net7.0' ">
     <RuntimeIdentifier Condition="'$(DotNetBuildFromSource)' != 'true'">win7-x86</RuntimeIdentifier>
     <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
     <TargetName Condition="'$(TargetFramework)' != '$(TargetNetFxVersion)'">$(AssemblyName.Replace('.x86', '')).$(TargetFramework).x86</TargetName>
diff --git a/src/testhost/testhost.csproj b/src/testhost/testhost.csproj
index ce52d0ac90..01d3621971 100644
--- a/src/testhost/testhost.csproj
+++ b/src/testhost/testhost.csproj
@@ -11,13 +11,13 @@
   <Import Project="$(TestPlatformRoot)scripts/build/TestPlatform.Settings.targets" />
   <PropertyGroup>
     <AssemblyName>testhost</AssemblyName>
-    <TargetFrameworks>$(TargetNetCoreVersion);$(TargetNetFxVersion);net47;net471;net472;net48</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;$(TargetNetCoreVersion);$(TargetNetFxVersion);net47;net471;net472;net48</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <OutputType>Exe</OutputType>
     <IsTestProject>false</IsTestProject>
     <ApplicationManifest>app.manifest</ApplicationManifest>
   </PropertyGroup>
-  <PropertyGroup Condition="'$(TargetFramework)' != '$(TargetNetCoreVersion)' AND '$(TargetFramework)' != 'net6.0' ">
+  <PropertyGroup Condition="'$(TargetFramework)' != '$(TargetNetCoreVersion)' AND '$(TargetFramework)' != 'net6.0' AND '$(TargetFramework)' != 'net7.0' ">
     <RuntimeIdentifier Condition="'$(DotNetBuildFromSource)' != 'true'">win7-x64</RuntimeIdentifier>
     <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
     <TargetName Condition="'$(TargetFramework)' != '$(TargetNetFxVersion)'">$(AssemblyName).$(TargetFramework)</TargetName>
diff --git a/src/vstest.console/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/vstest.console/PublicAPI/net7.0/PublicAPI.Shipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/vstest.console/PublicAPI/net7.0/PublicAPI.Shipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/vstest.console/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/vstest.console/PublicAPI/net7.0/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000000..7dc5c58110
--- /dev/null
+++ b/src/vstest.console/PublicAPI/net7.0/PublicAPI.Unshipped.txt
@@ -0,0 +1 @@
+#nullable enable
diff --git a/src/vstest.console/vstest.console.csproj b/src/vstest.console/vstest.console.csproj
index d7a3d0567b..539eb3bf08 100644
--- a/src/vstest.console/vstest.console.csproj
+++ b/src/vstest.console/vstest.console.csproj
@@ -8,8 +8,8 @@
   <PropertyGroup>
     <AssemblyName>vstest.console</AssemblyName>
     <AssemblyName Condition=" '$(RuntimeIdentifier)' == 'win10-arm64' ">vstest.console.arm64</AssemblyName>
-    <TargetFrameworks>$(TargetNetFxVersion);$(TargetNetCoreVersion)</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net6.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;$(TargetNetFxVersion);$(TargetNetCoreVersion)</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <OutputType>Exe</OutputType>
     <RollForward>Major</RollForward>
     <IsTestProject>false</IsTestProject>
diff --git a/test/TestAssets/ArchitectureSwitch/ArchitectureSwitch.csproj b/test/TestAssets/ArchitectureSwitch/ArchitectureSwitch.csproj
index 96466b21a1..4330294307 100644
--- a/test/TestAssets/ArchitectureSwitch/ArchitectureSwitch.csproj
+++ b/test/TestAssets/ArchitectureSwitch/ArchitectureSwitch.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
-    <TargetFrameworks Condition=" '$(OS)' != 'Windows_NT' ">net6.0;net5.0</TargetFrameworks>
-    <TargetFrameworks Condition=" '$(OS)' == 'Windows_NT' ">net6.0;netcoreapp3.1</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(OS)' != 'Windows_NT' ">net7.0;net6.0;net5.0</TargetFrameworks>
+    <TargetFrameworks Condition=" '$(OS)' == 'Windows_NT' ">net7.0;net6.0;netcoreapp3.1</TargetFrameworks>
     <IsPackable>false</IsPackable>
   </PropertyGroup>
   <ItemGroup>
diff --git a/test/TestAssets/Tools/Tools.csproj b/test/TestAssets/Tools/Tools.csproj
index 5981f1c93c..f135d9a66d 100644
--- a/test/TestAssets/Tools/Tools.csproj
+++ b/test/TestAssets/Tools/Tools.csproj
@@ -9,7 +9,7 @@
   <Import Project="..\..\..\scripts\build\TestAssets.props" />
 
   <PropertyGroup>
-    <TargetFrameworks>net5.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;net5.0</TargetFrameworks>
     <OutputType>Exe</OutputType>
     <RootNamespace>hanging_child</RootNamespace>
   </PropertyGroup>
diff --git a/test/TestAssets/child-crash/child-crash.csproj b/test/TestAssets/child-crash/child-crash.csproj
index e0221378ae..79103e1d8f 100644
--- a/test/TestAssets/child-crash/child-crash.csproj
+++ b/test/TestAssets/child-crash/child-crash.csproj
@@ -9,7 +9,7 @@
   <Import Project="..\..\..\scripts\build\TestAssets.props" />
 
   <PropertyGroup>
-    <TargetFrameworks>net5.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;net5.0</TargetFrameworks>
     <RootNamespace>child_crash</RootNamespace>
     <IsPackable>false</IsPackable>
   </PropertyGroup>
diff --git a/test/TestAssets/child-hang/child-hang.csproj b/test/TestAssets/child-hang/child-hang.csproj
index ccb65b2dbf..fd2070c4b2 100644
--- a/test/TestAssets/child-hang/child-hang.csproj
+++ b/test/TestAssets/child-hang/child-hang.csproj
@@ -8,7 +8,7 @@
   <Import Project="..\..\..\scripts\build\TestAssets.props" />
 
   <PropertyGroup>
-    <TargetFrameworks>$(TargetNetFxVersion);net472;net48;$(TargetNetCoreVersion);net5.0</TargetFrameworks>
+    <TargetFrameworks>$(TargetNetFxVersion);net472;net48;$(TargetNetCoreVersion);net7.0;net6.0;net5.0</TargetFrameworks>
     <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">netcoreapp3.1</TargetFrameworks>
     <RootNamespace>child_hang</RootNamespace>
     <IsPackable>false</IsPackable>
diff --git a/test/TestAssets/crash/crash.csproj b/test/TestAssets/crash/crash.csproj
index 40e2ee46c6..1cf0041859 100644
--- a/test/TestAssets/crash/crash.csproj
+++ b/test/TestAssets/crash/crash.csproj
@@ -8,7 +8,7 @@
   <Import Project="..\..\..\scripts\build\TestAssets.props" />
 
   <PropertyGroup>
-    <TargetFrameworks>$(TargetNetFxVersion);net472;net48;$(TargetNetCoreVersion);net5.0</TargetFrameworks>
+    <TargetFrameworks>$(TargetNetFxVersion);net472;net48;$(TargetNetCoreVersion);net7.0;net6.0;net5.0</TargetFrameworks>
     <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">netcoreapp3.1</TargetFrameworks>
     <CheckEolTargetFramework>false</CheckEolTargetFramework>
 
diff --git a/test/TestAssets/hanging-child/hanging-child.csproj b/test/TestAssets/hanging-child/hanging-child.csproj
index 0b4db786aa..29462503aa 100644
--- a/test/TestAssets/hanging-child/hanging-child.csproj
+++ b/test/TestAssets/hanging-child/hanging-child.csproj
@@ -9,7 +9,7 @@
   <Import Project="..\..\..\scripts\build\TestAssets.props" />
 
   <PropertyGroup>
-    <TargetFrameworks>net5.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;net5.0</TargetFrameworks>
     <OutputType>Exe</OutputType>
     <RootNamespace>hanging_child</RootNamespace>
   </PropertyGroup>
diff --git a/test/TestAssets/performance/Perfy.TestAdapter/Perfy.TestAdapter.csproj b/test/TestAssets/performance/Perfy.TestAdapter/Perfy.TestAdapter.csproj
index c1613de05a..f21b3c90af 100644
--- a/test/TestAssets/performance/Perfy.TestAdapter/Perfy.TestAdapter.csproj
+++ b/test/TestAssets/performance/Perfy.TestAdapter/Perfy.TestAdapter.csproj
@@ -2,7 +2,7 @@
   <!-- Package dependency versions -->
   <Import Project="..\..\..\..\scripts\build\TestAssets.props" />
   <PropertyGroup>
-    <TargetFrameworks>net6.0;net48;net472;net471;net5.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;net48;net472;net471;net5.0</TargetFrameworks>
     <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">netcoreapp3.1</TargetFrameworks>
     <CheckEolTargetFramework>false</CheckEolTargetFramework>
     <IsPackable>false</IsPackable>
diff --git a/test/TestAssets/problematic-child/problematic-child.csproj b/test/TestAssets/problematic-child/problematic-child.csproj
index cd12b0cde9..83be57c2d8 100644
--- a/test/TestAssets/problematic-child/problematic-child.csproj
+++ b/test/TestAssets/problematic-child/problematic-child.csproj
@@ -9,7 +9,7 @@
   <Import Project="..\..\..\scripts\build\TestAssets.props" />
 
   <PropertyGroup>
-    <TargetFrameworks>net5.0</TargetFrameworks>
+    <TargetFrameworks>net7.0;net6.0;net5.0</TargetFrameworks>
     <OutputType>Exe</OutputType>
     <RootNamespace>problematic_child</RootNamespace>
   </PropertyGroup>
diff --git a/test/TestAssets/timeout/timeout.csproj b/test/TestAssets/timeout/timeout.csproj
index 20818da131..4f9b22714d 100644
--- a/test/TestAssets/timeout/timeout.csproj
+++ b/test/TestAssets/timeout/timeout.csproj
@@ -9,7 +9,7 @@
   <Import Project="..\..\..\scripts\build\TestAssets.props" />
 
   <PropertyGroup>
-    <TargetFrameworks>$(TargetNetFxVersion);net472;net48;$(TargetNetCoreVersion);net5.0</TargetFrameworks>
+    <TargetFrameworks>$(TargetNetFxVersion);net472;net48;$(TargetNetCoreVersion);net7.0;net6.0;net5.0</TargetFrameworks>
     <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">netcoreapp3.1</TargetFrameworks>
     <CheckEolTargetFramework>false</CheckEolTargetFramework>
 

From 5627bb1814949a06e070c3c56ca71d7595604fa3 Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Tue, 16 Aug 2022 21:57:35 +0200
Subject: [PATCH 02/17] Warnings fixed. More to fix.

---
 .editorconfig                                 |   6 +-
 shared/NullableAttributes.cs                  |  11 -
 .../EventLogDataCollector.cs                  |  17 +-
 ...atform.Extensions.EventLogCollector.csproj |   8 +-
 .../DesignModeTestEventsRegistrar.cs          |   2 +-
 .../TestPlatform.cs                           |   8 +-
 .../DataCollectionAttachmentManager.cs        |   7 +-
 .../DataCollectionTelemetryManager.cs         |   2 +-
 .../Serialization/TestCaseConverter.cs        |   8 +-
 .../ValidateArg.cs                            |  16 +-
 .../DebuggerBreakpoint.cs                     |   9 +-
 .../Utility/EqtAssert.cs                      |   6 +-
 .../TestCase.cs                               |   9 +-
 .../Interfaces/System/IProcessHelper.cs       |   2 +-
 .../PublicAPI/PublicAPI.Shipped.txt           |   4 +-
 .../net462/System/ProcessHelper.cs            |   2 +-
 .../netcore/System/ProcessHelper.cs           |   2 +-
 .../netstandard/System/ProcessHelper.cs       |   2 +-
 .../uap10.0/System/ProcessHelper.cs           |   2 +-
 .../ClientUtilities.cs                        |   4 +-
 .../CodeCoverageDataAttachmentsHandler.cs     |  17 +-
 .../CodeCoverageRunSettingsProcessor.cs       |  17 +-
 .../InferRunSettingsHelper.cs                 |  26 +--
 .../MSTestSettingsUtilities.cs                |   4 +-
 .../Microsoft.TestPlatform.Utilities.csproj   |   2 +-
 .../XmlUtilities.cs                           |   2 +-
 src/testhost.x86/TestHostTraceListener.cs     |   4 +-
 .../CommandLine/AssemblyMetadataProvider.cs   |  23 +-
 .../InProcessVsTestConsoleWrapper.cs          |   8 +-
 src/vstest.console/Internal/ConsoleLogger.cs  | 199 +++++++++---------
 .../Internal/ProgressIndicator.cs             |   2 +-
 .../EnableBlameArgumentProcessor.cs           |  14 +-
 .../EnableCodeCoverageArgumentProcessor.cs    |  11 +-
 ...istFullyQualifiedTestsArgumentProcessor.cs |   2 +-
 .../RunSpecificTestsArgumentProcessor.cs      |   1 +
 .../TestPlatformHelpers/TestRequestManager.cs |   2 +-
 36 files changed, 247 insertions(+), 214 deletions(-)

diff --git a/.editorconfig b/.editorconfig
index f48fb56461..13425039fb 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -313,7 +313,7 @@ csharp_style_deconstructed_variable_declaration = true:suggestion
 csharp_style_inlined_variable_declaration = true:suggestion
 csharp_style_prefer_local_over_anonymous_function = false:suggestion # not default, default is true, avoided because we use anonymous functions in multiple places and it does not make the code clearer
 csharp_style_prefer_index_operator = true:suggestion
-csharp_style_prefer_range_operator = true:suggestion
+csharp_style_prefer_range_operator = false:suggestion # not default, default is true, disabled because Range operator is not supported in all the TFMs we support.
 csharp_style_throw_expression = true:suggestion
 csharp_style_unused_value_assignment_preference = discard_variable:suggestion
 csharp_style_unused_value_expression_statement_preference = discard_variable:silent
@@ -331,6 +331,10 @@ csharp_style_prefer_parameter_null_checking = false # not default, disabled as n
 # IDE0055: Fix formatting - Set the severity of all .NET and C# formatting rules (https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules)
 dotnet_diagnostic.IDE0055.severity = warning # ensure all formatting rules are enforced on build
 
+# IDE0057: Use range operator
+dotnet_diagnostic.IDE0057.severity = none # Range operator is not supported in some TFMs.
+
+
 #### C# Formatting Rules ####
 
 # New line preferences
diff --git a/shared/NullableAttributes.cs b/shared/NullableAttributes.cs
index 0879edb7f6..60ca01230a 100644
--- a/shared/NullableAttributes.cs
+++ b/shared/NullableAttributes.cs
@@ -3,9 +3,6 @@
 
 // This was copied from https://github.com/dotnet/coreclr/blob/60f1e6265bd1039f023a82e0643b524d6aaf7845/src/System.Private.CoreLib/shared/System/Diagnostics/CodeAnalysis/NullableAttributes.cs
 // and updated to have the scope of the attributes be internal.
-
-#pragma warning disable CA1019 // Define accessors for attribute arguments
-
 namespace System.Diagnostics.CodeAnalysis;
 
 #if NETFRAMEWORK || WINDOWS_UWP || NETSTANDARD && !NETSTANDARD2_1 || NETCOREAPP && !NETCOREAPP3_0_OR_GREATER
@@ -149,11 +146,3 @@ public MemberNotNullWhenAttribute(bool returnValue, params string[] members)
 }
 
 #endif
-
-/// <summary>
-/// Secret attribute that tells the CA1062 validate arguments rule that this method validates the argument is not null.
-/// </summary>
-[AttributeUsage(AttributeTargets.Parameter)]
-internal sealed class ValidatedNotNullAttribute : Attribute
-{
-}
diff --git a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs
index 04f3f78b25..b84d29cddb 100644
--- a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs
+++ b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs
@@ -335,7 +335,7 @@ private static ISet<string> ParseCommaSeparatedList(string commaSeparatedList)
         return strings;
     }
 
-    private void OnSessionStart(object sender, SessionStartEventArgs e)
+    private void OnSessionStart(object? sender, SessionStartEventArgs e)
     {
         ValidateArg.NotNull(e, nameof(e));
         ValidateArg.NotNull(e.Context, "SessionStartEventArgs.Context");
@@ -345,7 +345,7 @@ private void OnSessionStart(object sender, SessionStartEventArgs e)
         StartCollectionForContext(e.Context);
     }
 
-    private void OnSessionEnd(object sender, SessionEndEventArgs e)
+    private void OnSessionEnd(object? sender, SessionEndEventArgs e)
     {
         ValidateArg.NotNull(e, nameof(e));
         ValidateArg.NotNull(e.Context, "SessionEndEventArgs.Context");
@@ -355,7 +355,7 @@ private void OnSessionEnd(object sender, SessionEndEventArgs e)
         WriteCollectedEventLogEntries(e.Context, true, TimeSpan.MaxValue, DateTime.UtcNow);
     }
 
-    private void OnTestCaseStart(object sender, TestCaseStartEventArgs e)
+    private void OnTestCaseStart(object? sender, TestCaseStartEventArgs e)
     {
         ValidateArg.NotNull(e, nameof(e));
         ValidateArg.NotNull(e.Context, "TestCaseStartEventArgs.Context");
@@ -371,7 +371,7 @@ private void OnTestCaseStart(object sender, TestCaseStartEventArgs e)
         StartCollectionForContext(e.Context);
     }
 
-    private void OnTestCaseEnd(object sender, TestCaseEndEventArgs e)
+    private void OnTestCaseEnd(object? sender, TestCaseEndEventArgs e)
     {
         ValidateArg.NotNull(e, nameof(e));
         TPDebug.Assert(e.Context != null, "Context is null");
@@ -446,7 +446,7 @@ private void StartCollectionForContext(DataCollectionContext dataCollectionConte
         var fileName = WriteEventLogs(eventLogEntries, isSessionEnd ? int.MaxValue : MaxEntries, dataCollectionContext, requestedDuration, timeRequestReceived);
 
         // Add the directory to the list
-        _eventLogDirectories.Add(Path.GetDirectoryName(fileName));
+        _eventLogDirectories.Add(Path.GetDirectoryName(fileName)!);
 
         lock (ContextMap)
         {
@@ -566,16 +566,17 @@ private void ConfigureMaxEntries(CollectorNameValueConfigurationManager collecto
         }
     }
 
+    [return: NotNull]
     private EventLogSessionContext GetEventLogSessionContext(DataCollectionContext dataCollectionContext)
     {
-        EventLogSessionContext eventLogSessionContext;
+        EventLogSessionContext? eventLogSessionContext;
         bool eventLogContainerFound;
         lock (ContextMap)
         {
             eventLogContainerFound = ContextMap.TryGetValue(dataCollectionContext, out eventLogSessionContext);
         }
 
-        if (!eventLogContainerFound)
+        if (eventLogContainerFound == false)
         {
             string msg = string.Format(
                 CultureInfo.CurrentCulture,
@@ -584,7 +585,7 @@ private EventLogSessionContext GetEventLogSessionContext(DataCollectionContext d
             throw new EventLogCollectorException(msg, null);
         }
 
-        return eventLogSessionContext;
+        return eventLogSessionContext!;
     }
 
 }
diff --git a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/Microsoft.TestPlatform.Extensions.EventLogCollector.csproj b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/Microsoft.TestPlatform.Extensions.EventLogCollector.csproj
index 6247d42b27..5534492c44 100644
--- a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/Microsoft.TestPlatform.Extensions.EventLogCollector.csproj
+++ b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/Microsoft.TestPlatform.Extensions.EventLogCollector.csproj
@@ -11,13 +11,7 @@
     <IsTestProject>false</IsTestProject>
     <UseBannedApiAnalyzers>true</UseBannedApiAnalyzers>
   </PropertyGroup>
-  <ItemGroup Condition=" '$(DotNetBuildFromSource)' != 'true' ">
-    <Reference Include="System" />
-    <Reference Include="System.Runtime" />
-    <Reference Include="Microsoft.CSharp" />
-    <Reference Include="System.Xml" />
-  </ItemGroup>
-  <ItemGroup Condition="'$(TargetFramework)' == 'net6.0' or '$(TargetFramework)' == 'net7.0'">
+  <ItemGroup Condition="'$(TargetFramework)' == 'net7.0'">
     <PackageReference Include="System.Diagnostics.EventLog" Version="5.0.0" />
   </ItemGroup>
   <ItemGroup>
diff --git a/src/Microsoft.TestPlatform.Client/DesignMode/DesignModeTestEventsRegistrar.cs b/src/Microsoft.TestPlatform.Client/DesignMode/DesignModeTestEventsRegistrar.cs
index 100d58aac8..3a2f773b45 100644
--- a/src/Microsoft.TestPlatform.Client/DesignMode/DesignModeTestEventsRegistrar.cs
+++ b/src/Microsoft.TestPlatform.Client/DesignMode/DesignModeTestEventsRegistrar.cs
@@ -52,7 +52,7 @@ public void UnregisterTestRunEvents(ITestRunRequest testRunRequest)
     /// </summary>
     /// <param name="sender"></param>
     /// <param name="rawMessage">RawMessage from the testhost</param>
-    private void OnRawMessageReceived(object sender, string rawMessage)
+    private void OnRawMessageReceived(object? sender, string rawMessage)
     {
         // Directly send the data to translation layer instead of de-serializing it here
         _designModeClient.SendRawMessage(rawMessage);
diff --git a/src/Microsoft.TestPlatform.Client/TestPlatform.cs b/src/Microsoft.TestPlatform.Client/TestPlatform.cs
index 39100ed5ad..17da54ad1b 100644
--- a/src/Microsoft.TestPlatform.Client/TestPlatform.cs
+++ b/src/Microsoft.TestPlatform.Client/TestPlatform.cs
@@ -242,7 +242,7 @@ private void AddLoggerAssembliesFromSource(IEnumerable<string> sources, TestAdap
 
         foreach (string source in sources)
         {
-            string sourceDirectory = Path.GetDirectoryName(source);
+            var sourceDirectory = Path.GetDirectoryName(source);
             if (!string.IsNullOrEmpty(sourceDirectory) && _fileHelper.DirectoryExists(sourceDirectory))
             {
                 SearchOption searchOption = GetSearchOption(strategy, SearchOption.TopDirectoryOnly);
@@ -291,7 +291,9 @@ private static void AddExtensionAssembliesFromExtensionDirectory()
                 .Union(defaultExtensionPaths);
         }
 
-        string extensionsFolder = Path.Combine(Path.GetDirectoryName(typeof(TestPlatform).GetTypeInfo().Assembly.GetAssemblyLocation()), "Extensions");
+        string extensionsFolder = Path.Combine(
+            Path.GetDirectoryName(typeof(TestPlatform).GetTypeInfo().Assembly.GetAssemblyLocation())!,
+            "Extensions");
         if (!fileHelper.DirectoryExists(extensionsFolder))
         {
             // TODO: Since we no-longer run from <playground>\vstest.console\vstest.conosle.exe in Playground, the relative
@@ -299,7 +301,7 @@ private static void AddExtensionAssembliesFromExtensionDirectory()
             // should come up with a better way of fixing this.
             // NOTE: This is specific to Playground which references vstest.console from a location that doesn't contain
             // the Extensions folder. Normal projects shouldn't have this issue.
-            extensionsFolder = Path.Combine(Path.GetDirectoryName(extensionsFolder), "vstest.console", "Extensions");
+            extensionsFolder = Path.Combine(Path.GetDirectoryName(extensionsFolder)!, "vstest.console", "Extensions");
         }
 
         if (fileHelper.DirectoryExists(extensionsFolder))
diff --git a/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionAttachmentManager.cs b/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionAttachmentManager.cs
index 99e5e982a5..c79122b0dd 100644
--- a/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionAttachmentManager.cs
+++ b/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionAttachmentManager.cs
@@ -290,7 +290,12 @@ private void AddNewFileTransfer(FileTransferInformation fileTransferInfo, AsyncC
                         ex.ToString(),
                         uri,
                         friendlyName,
-                        Guid.Parse(testCaseId));
+#if NET7_0_OR_GREATER
+                        Guid.Parse(testCaseId, CultureInfo.InvariantCulture)
+#else
+                        Guid.Parse(testCaseId)
+#endif
+                        );
 
                     throw;
                 }
diff --git a/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionTelemetryManager.cs b/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionTelemetryManager.cs
index 66c1facc50..54a4c945e9 100644
--- a/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionTelemetryManager.cs
+++ b/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionTelemetryManager.cs
@@ -20,7 +20,7 @@ internal class DataCollectionTelemetryManager : IDataCollectionTelemetryManager
     private const string ClrIeInstrumentationMethodConfigurationPrefix32Variable = "MicrosoftInstrumentationEngine_ConfigPath32_";
     private const string ClrIeInstrumentationMethodConfigurationPrefix64Variable = "MicrosoftInstrumentationEngine_ConfigPath64_";
 
-    private static readonly Guid ClrIeProfilerGuid = Guid.Parse("{324f817a-7420-4e6d-b3c1-143fbed6d855}");
+    private static readonly Guid ClrIeProfilerGuid = new("{324f817a-7420-4e6d-b3c1-143fbed6d855}");
     private const string OverwrittenProfilerName = "overwritten";
 
     private readonly IRequestData _requestData;
diff --git a/src/Microsoft.TestPlatform.CommunicationUtilities/Serialization/TestCaseConverter.cs b/src/Microsoft.TestPlatform.CommunicationUtilities/Serialization/TestCaseConverter.cs
index 49906b0008..8b9064fccc 100644
--- a/src/Microsoft.TestPlatform.CommunicationUtilities/Serialization/TestCaseConverter.cs
+++ b/src/Microsoft.TestPlatform.CommunicationUtilities/Serialization/TestCaseConverter.cs
@@ -73,7 +73,13 @@ public override bool CanConvert(Type objectType)
             switch (testProperty.Id)
             {
                 case "TestCase.Id":
-                    testCase.Id = Guid.Parse(propertyData!); break;
+                    testCase.Id =
+#if NET7_0_OR_GREATER
+                        Guid.Parse(propertyData!, CultureInfo.InvariantCulture);
+#else
+                        Guid.Parse(propertyData!);
+#endif
+                    break;
                 case "TestCase.ExecutorUri":
                     testCase.ExecutorUri = new Uri(propertyData!); break;
                 case "TestCase.FullyQualifiedName":
diff --git a/src/Microsoft.TestPlatform.CoreUtilities/ValidateArg.cs b/src/Microsoft.TestPlatform.CoreUtilities/ValidateArg.cs
index 31f28f1abb..7b3cd47e13 100644
--- a/src/Microsoft.TestPlatform.CoreUtilities/ValidateArg.cs
+++ b/src/Microsoft.TestPlatform.CoreUtilities/ValidateArg.cs
@@ -34,7 +34,7 @@ public static class ValidateArg
     /// Type of argument.
     /// </returns>
     [DebuggerStepThrough]
-    public static T NotNull<T>([ValidatedNotNull] T? arg, string parameterName)
+    public static T NotNull<T>([NotNull] T? arg, string parameterName)
     {
         return arg ?? throw new ArgumentNullException(parameterName);
     }
@@ -55,7 +55,7 @@ public static T NotNull<T>([ValidatedNotNull] T? arg, string parameterName)
     /// Thrown if the input string is null or empty.
     /// </exception>
     [DebuggerStepThrough]
-    public static string NotNullOrEmpty([ValidatedNotNull] string? arg, string parameterName)
+    public static string NotNullOrEmpty([NotNull] string? arg, string parameterName)
     {
         return arg.IsNullOrEmpty() ? throw new ArgumentNullException(parameterName) : arg;
     }
@@ -76,7 +76,7 @@ public static string NotNullOrEmpty([ValidatedNotNull] string? arg, string param
     /// Thrown if the input string is null, empty or consists only of white-space characters.
     /// </exception>
     [DebuggerStepThrough]
-    public static string NotNullOrWhiteSpace([ValidatedNotNull] string? arg, string parameterName)
+    public static string NotNullOrWhiteSpace([NotNull] string? arg, string parameterName)
     {
         return arg.IsNullOrWhiteSpace() ? throw new ArgumentNullException(parameterName) : arg;
     }
@@ -118,7 +118,7 @@ public static void NotNegative(long arg, string parameterName)
     /// <param name="arg">The argument to check.</param>
     /// <param name="parameterName">The parameter name of the argument.</param>
     [DebuggerStepThrough]
-    public static void NotNullOrEmpty<T>([ValidatedNotNull] IEnumerable<T>? arg, string parameterName)
+    public static void NotNullOrEmpty<T>([NotNull] IEnumerable<T>? arg, string parameterName)
     {
         NotNull(arg, parameterName);
 
@@ -136,7 +136,7 @@ public static void NotNullOrEmpty<T>([ValidatedNotNull] IEnumerable<T>? arg, str
     /// <param name="parameterName">The parameter name of the argument.</param>
     /// <typeparam name="T">The type of the expected argument.</typeparam>
     [DebuggerStepThrough]
-    public static void TypeOf<T>([ValidatedNotNull] object? arg, string parameterName)
+    public static void TypeOf<T>([NotNull] object? arg, string parameterName)
         where T : class
     {
         NotNull(arg, parameterName);
@@ -161,7 +161,7 @@ public static class ValidateArgProperty
     /// <param name="parameterName">The parameter name of the argument.</param>
     /// <param name="propertyName">The property name of the argument.</param>
     [DebuggerStepThrough]
-    public static void NotNull([ValidatedNotNull] object? arg, string parameterName, string propertyName)
+    public static void NotNull([NotNull] object? arg, string parameterName, string propertyName)
     {
         if (arg == null)
         {
@@ -193,7 +193,7 @@ public static void NotNegative(int arg, string parameterName, string propertyNam
     /// <param name="parameterName">The parameter name of the argument.</param>
     /// <param name="propertyName">The property name of the argument.</param>
     [DebuggerStepThrough]
-    public static void NotNullOrEmpty([ValidatedNotNull] string? arg, string parameterName, string propertyName)
+    public static void NotNullOrEmpty([NotNull] string? arg, string parameterName, string propertyName)
     {
         NotNull(arg, parameterName, propertyName);
 
@@ -212,7 +212,7 @@ public static void NotNullOrEmpty([ValidatedNotNull] string? arg, string paramet
     /// <param name="propertyName">The property name of the argument.</param>
     /// <typeparam name="T">The type of the expected argument.</typeparam>
     [DebuggerStepThrough]
-    public static void TypeOf<T>([ValidatedNotNull] object? arg, string parameterName, string propertyName)
+    public static void TypeOf<T>([NotNull] object? arg, string parameterName, string propertyName)
         where T : class
     {
         NotNull(arg, parameterName, propertyName);
diff --git a/src/Microsoft.TestPlatform.Execution.Shared/DebuggerBreakpoint.cs b/src/Microsoft.TestPlatform.Execution.Shared/DebuggerBreakpoint.cs
index 3d859427df..b765acc1f8 100644
--- a/src/Microsoft.TestPlatform.Execution.Shared/DebuggerBreakpoint.cs
+++ b/src/Microsoft.TestPlatform.Execution.Shared/DebuggerBreakpoint.cs
@@ -43,7 +43,14 @@ internal static void AttachVisualStudioDebugger(string environmentVariable)
             }
             else
             {
-                ConsoleOutput.Instance.WriteLine($"Attaching Visual Studio with PID {vsPid} to the process '{Process.GetCurrentProcess().ProcessName}({Process.GetCurrentProcess().Id})'...", OutputLevel.Information);
+                var processId =
+#if NET6_0_OR_GREATER
+                    Environment.ProcessId;
+#else
+                    Process.GetCurrentProcess().Id;
+#endif
+
+                ConsoleOutput.Instance.WriteLine($"Attaching Visual Studio with PID {vsPid} to the process '{Process.GetCurrentProcess().ProcessName}({processId})'...", OutputLevel.Information);
             }
 
             AttachVs(Process.GetCurrentProcess(), vsPid);
diff --git a/src/Microsoft.TestPlatform.Extensions.TrxLogger/Utility/EqtAssert.cs b/src/Microsoft.TestPlatform.Extensions.TrxLogger/Utility/EqtAssert.cs
index d12662bf64..1dd4ee85b6 100644
--- a/src/Microsoft.TestPlatform.Extensions.TrxLogger/Utility/EqtAssert.cs
+++ b/src/Microsoft.TestPlatform.Extensions.TrxLogger/Utility/EqtAssert.cs
@@ -42,7 +42,7 @@ public static void IsTrue(bool expression, string comment)
     /// </summary>
     /// <param name="parameter">Parameter to check</param>
     /// <param name="parameterName">String - parameter name</param>
-    public static void ParameterNotNull([ValidatedNotNull] object? parameter, [ValidatedNotNull] string parameterName)
+    public static void ParameterNotNull([NotNull] object? parameter, [NotNull] string parameterName)
     {
         AssertParameterNameNotNullOrEmpty(parameterName);
         TPDebug.Assert(parameter != null, $"'{nameof(parameterName)}' is null");
@@ -57,7 +57,7 @@ public static void ParameterNotNull([ValidatedNotNull] object? parameter, [Valid
     /// </summary>
     /// <param name="parameter">Parameter to check</param>
     /// <param name="parameterName">String - parameter name</param>
-    public static void StringNotNullOrEmpty([ValidatedNotNull] string? parameter, [ValidatedNotNull] string parameterName)
+    public static void StringNotNullOrEmpty([NotNull] string? parameter, [NotNull] string parameterName)
     {
         AssertParameterNameNotNullOrEmpty(parameterName);
         TPDebug.Assert(!parameter.IsNullOrEmpty(), $"'{nameof(parameterName)}' is null or empty");
@@ -72,7 +72,7 @@ public static void StringNotNullOrEmpty([ValidatedNotNull] string? parameter, [V
     /// </summary>
     /// <param name="parameterName">The parameter name to verify</param>
     [Conditional("DEBUG")]
-    private static void AssertParameterNameNotNullOrEmpty([ValidatedNotNull] string? parameterName)
+    private static void AssertParameterNameNotNullOrEmpty([NotNull] string? parameterName)
     {
         TPDebug.Assert(!parameterName.IsNullOrEmpty(), "'parameterName' is null or empty");
     }
diff --git a/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs b/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs
index 5de3ce721a..34db9c3320 100644
--- a/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs
+++ b/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Globalization;
 using System.IO;
 using System.Linq;
 using System.Runtime.Serialization;
@@ -261,7 +262,13 @@ protected override void ProtectedSetPropertyValue(TestProperty property, object?
                 return;
 
             case "TestCase.Id":
-                Id = value is Guid guid ? guid : Guid.Parse((value as string)!);
+                Id = value is Guid guid
+                    ? guid
+#if NET7_0_OR_GREATER
+                    : Guid.Parse((value as string)!, CultureInfo.InvariantCulture);
+#else
+                    : Guid.Parse((value as string)!);
+#endif
                 return;
 
             case "TestCase.LineNumber":
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/Interfaces/System/IProcessHelper.cs b/src/Microsoft.TestPlatform.PlatformAbstractions/Interfaces/System/IProcessHelper.cs
index 28e99e1d99..6d468d0dd2 100644
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/Interfaces/System/IProcessHelper.cs
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/Interfaces/System/IProcessHelper.cs
@@ -116,5 +116,5 @@ public interface IProcessHelper
     /// </summary>
     /// <param name="processId">process id</param>
     /// <returns>Process Handle</returns>
-    IntPtr GetProcessHandle(int processId);
+    nint GetProcessHandle(int processId);
 }
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/PublicAPI.Shipped.txt
index 5fb1f3356d..696ed76517 100644
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/PublicAPI.Shipped.txt
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/PublicAPI.Shipped.txt
@@ -47,7 +47,7 @@ Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelp
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper.GetCurrentProcessId() -> int
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper.GetCurrentProcessLocation() -> string!
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper.GetNativeDllDirectory() -> string!
-Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper.GetProcessHandle(int processId) -> System.IntPtr
+Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper.GetProcessHandle(int processId) -> nint
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper.GetProcessId(object? process) -> int
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper.GetProcessName(int processId) -> string!
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper.GetTestEngineDirectory() -> string?
@@ -102,7 +102,7 @@ Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.GetCurren
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.GetCurrentProcessId() -> int
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.GetCurrentProcessLocation() -> string!
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.GetNativeDllDirectory() -> string!
-Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.GetProcessHandle(int processId) -> System.IntPtr
+Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.GetProcessHandle(int processId) -> nint
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.GetProcessId(object? process) -> int
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.GetProcessName(int processId) -> string!
 Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.GetTestEngineDirectory() -> string?
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/net462/System/ProcessHelper.cs b/src/Microsoft.TestPlatform.PlatformAbstractions/net462/System/ProcessHelper.cs
index e0553562cb..cc65454857 100644
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/net462/System/ProcessHelper.cs
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/net462/System/ProcessHelper.cs
@@ -21,7 +21,7 @@ public string GetCurrentProcessLocation()
         => Path.GetDirectoryName(GetCurrentProcessFileName());
 
     /// <inheritdoc/>
-    public IntPtr GetProcessHandle(int processId) =>
+    public nint GetProcessHandle(int processId) =>
         processId == _currentProcess.Id
             ? _currentProcess.Handle
             : Process.GetProcessById(processId).Handle;
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/netcore/System/ProcessHelper.cs b/src/Microsoft.TestPlatform.PlatformAbstractions/netcore/System/ProcessHelper.cs
index 5d7b528081..6cf4b0f91b 100644
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/netcore/System/ProcessHelper.cs
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/netcore/System/ProcessHelper.cs
@@ -22,7 +22,7 @@ public string GetCurrentProcessLocation()
     }
 
     /// <inheritdoc/>
-    public IntPtr GetProcessHandle(int processId)
+    public nint GetProcessHandle(int processId)
     {
         // An IntPtr representing the value of the handle field.
         // If the handle has been marked invalid with SetHandleAsInvalid, this method still returns the original handle value, which can be a stale value.
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/netstandard/System/ProcessHelper.cs b/src/Microsoft.TestPlatform.PlatformAbstractions/netstandard/System/ProcessHelper.cs
index 4105394a18..c8b411af8c 100644
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/netstandard/System/ProcessHelper.cs
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/netstandard/System/ProcessHelper.cs
@@ -93,7 +93,7 @@ public void WaitForProcessExit(object? process)
         throw new NotImplementedException();
     }
 
-    public IntPtr GetProcessHandle(int processId)
+    public nint GetProcessHandle(int processId)
     {
         throw new NotImplementedException();
     }
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/uap10.0/System/ProcessHelper.cs b/src/Microsoft.TestPlatform.PlatformAbstractions/uap10.0/System/ProcessHelper.cs
index 4661959451..9080d278b9 100644
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/uap10.0/System/ProcessHelper.cs
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/uap10.0/System/ProcessHelper.cs
@@ -94,7 +94,7 @@ public void WaitForProcessExit(object? process)
         throw new NotImplementedException();
     }
 
-    public IntPtr GetProcessHandle(int processId)
+    public nint GetProcessHandle(int processId)
     {
         throw new NotImplementedException();
     }
diff --git a/src/Microsoft.TestPlatform.Utilities/ClientUtilities.cs b/src/Microsoft.TestPlatform.Utilities/ClientUtilities.cs
index d637998729..9848ca74d8 100644
--- a/src/Microsoft.TestPlatform.Utilities/ClientUtilities.cs
+++ b/src/Microsoft.TestPlatform.Utilities/ClientUtilities.cs
@@ -29,7 +29,7 @@ public static void FixRelativePathsInRunSettings(XmlDocument xmlDocument, string
         ValidateArg.NotNull(xmlDocument, nameof(xmlDocument));
         ValidateArg.NotNullOrEmpty(path, nameof(path));
 
-        string root = Path.GetDirectoryName(path);
+        var root = Path.GetDirectoryName(path)!;
 
         AddRunSettingsDirectoryNode(xmlDocument, root);
 
@@ -54,6 +54,8 @@ public static void FixRelativePathsInRunSettings(XmlDocument xmlDocument, string
 
     private static void AddRunSettingsDirectoryNode(XmlDocument doc, string path)
     {
+        ValidateArg.NotNull(doc.DocumentElement, nameof(doc.DocumentElement));
+
         var node = doc.CreateNode(XmlNodeType.Element, RunsettingsDirectory, string.Empty);
         node.InnerXml = path;
         doc.DocumentElement.AppendChild(node);
diff --git a/src/Microsoft.TestPlatform.Utilities/CodeCoverageDataAttachmentsHandler.cs b/src/Microsoft.TestPlatform.Utilities/CodeCoverageDataAttachmentsHandler.cs
index 83a82545c0..be25c77976 100644
--- a/src/Microsoft.TestPlatform.Utilities/CodeCoverageDataAttachmentsHandler.cs
+++ b/src/Microsoft.TestPlatform.Utilities/CodeCoverageDataAttachmentsHandler.cs
@@ -122,14 +122,16 @@ public async Task<ICollection<AttachmentSet>> ProcessAttachmentSetsAsync(XmlElem
 
     private static async Task<IList<string>?> MergeCodeCoverageFilesAsync(IList<string> files, CancellationToken cancellationToken)
     {
+        TPDebug.Assert(s_mergeOperationEnumValues != null);
+
         cancellationToken.ThrowIfCancellationRequested();
 
         // Invoke methods
         LoadCodeCoverageAssembly();
-        var task = (Task)s_mergeMethodInfo.Invoke(s_classInstance, new object[] { files[0], files, s_mergeOperationEnumValues.GetValue(0), true, cancellationToken });
+        var task = (Task)s_mergeMethodInfo.Invoke(s_classInstance, new object[] { files[0], files, s_mergeOperationEnumValues.GetValue(0)!, true, cancellationToken })!;
         await task.ConfigureAwait(false);
 
-        if (task.GetType().GetProperty("Result").GetValue(task, null) is not IList<string> mergedResults)
+        if (task.GetType().GetProperty("Result")!.GetValue(task, null) is not IList<string> mergedResults)
         {
             EqtTrace.Error("CodeCoverageDataCollectorAttachmentsHandler: Failed to merge code coverage files.");
             return files;
@@ -163,15 +165,16 @@ private static void LoadCodeCoverageAssembly()
             return;
         }
 
-        var assemblyPath = Path.Combine(Path.GetDirectoryName(typeof(CodeCoverageDataAttachmentsHandler).GetTypeInfo().Assembly.GetAssemblyLocation()), CodeCoverageIoAssemblyName + ".dll");
+        var dataAttachmentAssemblyLocation = typeof(CodeCoverageDataAttachmentsHandler).GetTypeInfo().Assembly.GetAssemblyLocation()!;
+        var assemblyPath = Path.Combine(Path.GetDirectoryName(dataAttachmentAssemblyLocation)!, CodeCoverageIoAssemblyName + ".dll");
         s_codeCoverageAssembly = new PlatformAssemblyLoadContext().LoadAssemblyFromPath(assemblyPath);
 
-        var classType = s_codeCoverageAssembly.GetType($"{CodeCoverageIoAssemblyName}.{CoverageFileUtilityTypeName}");
-        s_classInstance = Activator.CreateInstance(classType);
+        var classType = s_codeCoverageAssembly.GetType($"{CodeCoverageIoAssemblyName}.{CoverageFileUtilityTypeName}")!;
+        s_classInstance = Activator.CreateInstance(classType)!;
 
         var types = s_codeCoverageAssembly.GetTypes();
-        var mergeOperationEnum = Array.Find(types, d => d.Name == CoverageMergeOperationName);
+        var mergeOperationEnum = Array.Find(types, d => d.Name == CoverageMergeOperationName)!;
         s_mergeOperationEnumValues = Enum.GetValues(mergeOperationEnum);
-        s_mergeMethodInfo = classType.GetMethod(MergeMethodName, new[] { typeof(string), typeof(IList<string>), mergeOperationEnum, typeof(bool), typeof(CancellationToken) });
+        s_mergeMethodInfo = classType.GetMethod(MergeMethodName, new[] { typeof(string), typeof(IList<string>), mergeOperationEnum, typeof(bool), typeof(CancellationToken) })!;
     }
 }
diff --git a/src/Microsoft.TestPlatform.Utilities/CodeCoverageRunSettingsProcessor.cs b/src/Microsoft.TestPlatform.Utilities/CodeCoverageRunSettingsProcessor.cs
index 4b958a2416..05fc9b3fba 100644
--- a/src/Microsoft.TestPlatform.Utilities/CodeCoverageRunSettingsProcessor.cs
+++ b/src/Microsoft.TestPlatform.Utilities/CodeCoverageRunSettingsProcessor.cs
@@ -188,11 +188,13 @@ public CodeCoverageRunSettingsProcessor(XmlNode defaultSettingsRootNode)
             // default settings node and bail out.
             if (tempNode == null)
             {
-                var defaultNode = ExtractNode(
-                    defaultRootNode,
-                    partialPath.ToString());
+                var defaultNode = ExtractNode(defaultRootNode, partialPath.ToString());
+                if (defaultNode == null)
+                {
+                    return null;
+                }
 
-                var importedChild = currentNode.OwnerDocument.ImportNode(defaultNode, true);
+                var importedChild = currentNode.OwnerDocument!.ImportNode(defaultNode, true);
                 currentNode.AppendChild(importedChild);
 
                 return null;
@@ -219,6 +221,11 @@ private static bool ShouldProcessCurrentExclusion(XmlNode node)
     {
         const string attributeName = "mergeDefaults";
 
+        if (node.Attributes == null)
+        {
+            return true;
+        }
+
         foreach (XmlAttribute attribute in node.Attributes)
         {
             // If the attribute is present and set on 'false' we skip processing for the
@@ -298,7 +305,7 @@ private static void MergeNodes(XmlNode currentNode, XmlNode? defaultNode)
             }
 
             // Import missing default exclusions.
-            var importedChild = currentNode.OwnerDocument.ImportNode(child, true);
+            var importedChild = currentNode.OwnerDocument!.ImportNode(child, true);
             currentNode.AppendChild(importedChild);
         }
     }
diff --git a/src/Microsoft.TestPlatform.Utilities/InferRunSettingsHelper.cs b/src/Microsoft.TestPlatform.Utilities/InferRunSettingsHelper.cs
index 9a8535fadc..85e522aabc 100644
--- a/src/Microsoft.TestPlatform.Utilities/InferRunSettingsHelper.cs
+++ b/src/Microsoft.TestPlatform.Utilities/InferRunSettingsHelper.cs
@@ -95,7 +95,7 @@ public class InferRunSettingsHelper
         var document = new XmlDocument();
         document.Load(reader);
 
-        var runSettingsNavigator = document.CreateNavigator();
+        var runSettingsNavigator = document.CreateNavigator()!;
 
         // Move navigator to RunConfiguration node
         if (!runSettingsNavigator.MoveToChild(RunSettingsNodeName, string.Empty) ||
@@ -155,7 +155,7 @@ public class InferRunSettingsHelper
     /// <param name="resultsDirectory"> The results directory. </param>
     public static void UpdateRunSettingsWithUserProvidedSwitches(XmlDocument runSettingsDocument, Architecture architecture, Framework framework, string? resultsDirectory)
     {
-        var runSettingsNavigator = runSettingsDocument.CreateNavigator();
+        var runSettingsNavigator = runSettingsDocument.CreateNavigator()!;
 
         ValidateRunConfiguration(runSettingsNavigator);
 
@@ -325,7 +325,7 @@ public static bool TryGetLegacySettingElements(string runsettingsXml, out Dictio
             using var reader = XmlReader.Create(stream, XmlRunSettingsUtilities.ReaderSettings);
             var document = new XmlDocument();
             document.Load(reader);
-            var runSettingsNavigator = document.CreateNavigator();
+            var runSettingsNavigator = document.CreateNavigator()!;
 
             var node = runSettingsNavigator.SelectSingleNode(@"/RunSettings/LegacySettings");
             if (node == null)
@@ -338,7 +338,7 @@ public static bool TryGetLegacySettingElements(string runsettingsXml, out Dictio
             var legacySettingElements = new List<string>();
             while (childNodes.MoveNext())
             {
-                legacySettingElements.Add(childNodes.Current.Name);
+                legacySettingElements.Add(childNodes.Current!.Name);
             }
 
             foreach (var executionNodePath in ExecutionNodesPaths)
@@ -414,7 +414,7 @@ public static bool TryGetLegacySettingElements(string runsettingsXml, out Dictio
             using var reader = XmlReader.Create(stream, XmlRunSettingsUtilities.ReaderSettings);
             var document = new XmlDocument();
             document.Load(reader);
-            var runSettingsNavigator = document.CreateNavigator();
+            var runSettingsNavigator = document.CreateNavigator()!;
 
             var node = runSettingsNavigator.SelectSingleNode(EnvironmentVariablesNodePath);
             if (node == null)
@@ -456,7 +456,7 @@ public static bool TryGetDeviceXml(XPathNavigator runSettingsNavigator, [NotNull
         ValidateArg.NotNull(runSettingsNavigator, nameof(runSettingsNavigator));
 
         deviceXml = null;
-        XPathNavigator targetDeviceNode = runSettingsNavigator.SelectSingleNode(MsTestTargetDeviceNodePath);
+        var targetDeviceNode = runSettingsNavigator.SelectSingleNode(MsTestTargetDeviceNodePath);
         if (targetDeviceNode != null)
         {
             deviceXml = targetDeviceNode.InnerXml;
@@ -483,7 +483,7 @@ public static bool IsTestSettingsEnabled(string? runsettingsXml)
             var document = new XmlDocument();
             document.Load(reader);
 
-            var runSettingsNavigator = document.CreateNavigator();
+            var runSettingsNavigator = document.CreateNavigator()!;
 
             // Move navigator to MSTest node
             if (!runSettingsNavigator.MoveToChild(RunSettingsNodeName, string.Empty) ||
@@ -512,9 +512,9 @@ private static void AddNodeIfNotPresent<T>(XmlDocument xmlDocument, string nodeP
         // Navigator should be at Root of runsettings xml, attempt to move to /RunSettings/RunConfiguration
         var root = xmlDocument.DocumentElement;
 
-        if (root.SelectSingleNode(RunConfigurationNodePath) == null)
+        if (root?.SelectSingleNode(RunConfigurationNodePath) == null)
         {
-            if (root.Name == RunSettingsNodeName)
+            if (root?.Name == RunSettingsNodeName)
             {
                 // When just <RunSettings></RunSettings> is provided in the runsettings string, then this will add the common RunConfiguration inner node.
                 XmlUtilities.AppendOrModifyChild(xmlDocument, RunConfigurationNodePath, RunConfigurationNodeName, innerXml: null);
@@ -705,12 +705,8 @@ public static IEnumerable<string> FilterCompatibleSources(Architecture chosenPla
     /// </summary>
     private static bool IsPlatformIncompatible(Architecture sourcePlatform, Architecture targetPlatform)
     {
-        if (sourcePlatform is Architecture.Default or Architecture.AnyCPU)
-        {
-            return false;
-        }
-
-        return targetPlatform == Architecture.X64 && !Is64BitOperatingSystem() || sourcePlatform != targetPlatform;
+        return sourcePlatform is not Architecture.Default and not Architecture.AnyCPU
+&& (targetPlatform == Architecture.X64 && !Is64BitOperatingSystem() || sourcePlatform != targetPlatform);
 
         static bool Is64BitOperatingSystem()
         {
diff --git a/src/Microsoft.TestPlatform.Utilities/MSTestSettingsUtilities.cs b/src/Microsoft.TestPlatform.Utilities/MSTestSettingsUtilities.cs
index 78637752b6..0d94b7de48 100644
--- a/src/Microsoft.TestPlatform.Utilities/MSTestSettingsUtilities.cs
+++ b/src/Microsoft.TestPlatform.Utilities/MSTestSettingsUtilities.cs
@@ -35,7 +35,7 @@ public static XmlDocument Import(string settingsFile, XmlDocument defaultRunSett
             throw new XmlException(string.Format(CultureInfo.CurrentCulture, UtilitiesResources.UnExpectedSettingsFile));
         }
 
-        var navigator = defaultRunSettings.CreateNavigator();
+        var navigator = defaultRunSettings.CreateNavigator()!;
 
         if (!navigator.MoveToChild(Constants.RunSettingsName, string.Empty))
         {
@@ -44,7 +44,7 @@ public static XmlDocument Import(string settingsFile, XmlDocument defaultRunSett
 
         var settingsNode = GenerateMsTestXml(settingsFile);
 
-        defaultRunSettings.DocumentElement.PrependChild(defaultRunSettings.ImportNode(settingsNode, true));
+        defaultRunSettings.DocumentElement!.PrependChild(defaultRunSettings.ImportNode(settingsNode, true));
 
         // Adding RunConfig
         if (!navigator.MoveToChild(Constants.RunConfigurationSettingsName, string.Empty))
diff --git a/src/Microsoft.TestPlatform.Utilities/Microsoft.TestPlatform.Utilities.csproj b/src/Microsoft.TestPlatform.Utilities/Microsoft.TestPlatform.Utilities.csproj
index a4e4253a8e..23e3f5ce51 100644
--- a/src/Microsoft.TestPlatform.Utilities/Microsoft.TestPlatform.Utilities.csproj
+++ b/src/Microsoft.TestPlatform.Utilities/Microsoft.TestPlatform.Utilities.csproj
@@ -10,7 +10,7 @@
     <TargetFrameworks Condition=" '$(DotNetBuildFromSource)' == 'true' ">net7.0;</TargetFrameworks>
     <IsTestProject>false</IsTestProject>
   </PropertyGroup>
-  <ItemGroup Condition="'$(TargetFramework)' == '$(TargetNetFxVersion)' ">
+  <ItemGroup Condition="'$(TargetFramework)' == '$(TargetNetFxVersion)'">
     <Reference Include="System" />
     <Reference Include="System.Runtime" />
     <Reference Include="System.Xml" />
diff --git a/src/Microsoft.TestPlatform.Utilities/XmlUtilities.cs b/src/Microsoft.TestPlatform.Utilities/XmlUtilities.cs
index 263122930b..3d891e82d4 100644
--- a/src/Microsoft.TestPlatform.Utilities/XmlUtilities.cs
+++ b/src/Microsoft.TestPlatform.Utilities/XmlUtilities.cs
@@ -63,7 +63,7 @@ internal static bool IsValidNodeXmlValue(string xmlNodeValue, Func<string, bool>
         var secureInnerXml = SecurityElement.Escape(innerXml);
 #else
         // fixing manually as we currently target to netcore 1.1 and we don't have default implementation for Escape functionality
-        var secureInnerXml = innerXml.IsNullOrEmpty() ? innerXml : innerXml.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;").Replace("\"", "&quot;").Replace("'", "&apos;");
+        var secureInnerXml = (innerXml ?? string.Empty).Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;").Replace("\"", "&quot;").Replace("'", "&apos;");
 #endif
         if (childNode == null)
         {
diff --git a/src/testhost.x86/TestHostTraceListener.cs b/src/testhost.x86/TestHostTraceListener.cs
index 3be97db76a..0832b07d6d 100644
--- a/src/testhost.x86/TestHostTraceListener.cs
+++ b/src/testhost.x86/TestHostTraceListener.cs
@@ -33,12 +33,12 @@ public static void Setup()
         EqtTrace.Verbose("TestPlatformTraceListener.Setup: Added test platform trace listener.");
     }
 
-    public override void Fail(string message)
+    public override void Fail(string? message)
     {
         throw GetException(message);
     }
 
-    public override void Fail(string message, string detailMessage)
+    public override void Fail(string? message, string? detailMessage)
     {
         throw GetException((message + Environment.NewLine + detailMessage));
     }
diff --git a/src/vstest.console/CommandLine/AssemblyMetadataProvider.cs b/src/vstest.console/CommandLine/AssemblyMetadataProvider.cs
index fef3e315db..a30916f0d3 100644
--- a/src/vstest.console/CommandLine/AssemblyMetadataProvider.cs
+++ b/src/vstest.console/CommandLine/AssemblyMetadataProvider.cs
@@ -58,7 +58,15 @@ public Architecture GetArchitecture(string assemblyPath)
         {
             // AssemblyName won't load the assembly into current domain.
             var assemblyName = AssemblyName.GetAssemblyName(assemblyPath);
-            archType = MapToArchitecture(assemblyName.ProcessorArchitecture, assemblyPath);
+
+            var processorArchitecture =
+#if NET7_0_OR_GREATER
+                ProcessorArchitecture.None;
+#else
+                assemblyName.ProcessorArchitecture;
+#endif
+
+            archType = MapToArchitecture(processorArchitecture, assemblyPath);
         }
         catch (Exception ex)
         {
@@ -102,15 +110,9 @@ private Architecture GetArchitectureFromAssemblyMetadata(string path)
                     // to Run image that flag is not "updated" and ignored. So we check if the module is IL only or not.
                     // If it's not IL only it means that is a R2R (Ready to Run) and we're already in the correct architecture x86.
                     // In all other cases the architecture will end inside the correct switch branch.
-                    var corflags = peReader.PEHeaders.CorHeader.Flags;
-                    if ((corflags & CorFlags.Requires32Bit) != 0 || (corflags & CorFlags.ILOnly) == 0)
-                    {
-                        return Architecture.X86;
-                    }
-                    else
-                    {
-                        return Architecture.AnyCPU;
-                    }
+                    var corflags = peReader.PEHeaders.CorHeader?.Flags;
+                    return (corflags & CorFlags.Requires32Bit) != 0 || (corflags & CorFlags.ILOnly) == 0
+                        ? Architecture.X86 : Architecture.AnyCPU;
                 default:
                     {
                         EqtTrace.Error($"AssemblyMetadataProvider.GetArchitecture: Unhandled architecture '{peReader.PEHeaders.CoffHeader.Machine}'.");
@@ -206,7 +208,6 @@ public Architecture GetArchitectureForSource(string imagePath)
         const int imageFileMachineThumb = 0x01c2; // ARM Thumb/Thumb-2 Little-Endian
         const int imageFileMachineArmnt = 0x01c4; // ARM Thumb-2 Little-Endian
 
-
         try
         {
             //get the input stream
diff --git a/src/vstest.console/InProcessVsTestConsoleWrapper.cs b/src/vstest.console/InProcessVsTestConsoleWrapper.cs
index 624aed1ea8..b8c71d4934 100644
--- a/src/vstest.console/InProcessVsTestConsoleWrapper.cs
+++ b/src/vstest.console/InProcessVsTestConsoleWrapper.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Globalization;
 using System.Linq;
 using System.Threading;
@@ -81,7 +80,12 @@ public InProcessVsTestConsoleWrapper(ConsoleParameters consoleParameters)
         }
 
         // Fill the parameters.
-        consoleParameters.ParentProcessId = Process.GetCurrentProcess().Id;
+        consoleParameters.ParentProcessId =
+#if NET7_0_OR_GREATER
+            Environment.ProcessId;
+#else
+            System.Diagnostics.Process.GetCurrentProcess().Id;
+#endif
         consoleParameters.PortNumber = port;
 
         // Start vstest.console.
diff --git a/src/vstest.console/Internal/ConsoleLogger.cs b/src/vstest.console/Internal/ConsoleLogger.cs
index c70dfeb2d9..59a4a4b1d8 100644
--- a/src/vstest.console/Internal/ConsoleLogger.cs
+++ b/src/vstest.console/Internal/ConsoleLogger.cs
@@ -701,115 +701,118 @@ private void TestRunCompleteHandler(object? sender, TestRunCompleteEventArgs e)
             }
         }
 
-        var leafTestResultsPerSource = LeafTestResults.Select(p => p.Value).GroupBy(r => r.TestCase.Source);
-        foreach (var sd in leafTestResultsPerSource)
+        var leafTestResultsPerSource = LeafTestResults?.Select(p => p.Value).GroupBy(r => r.TestCase.Source);
+        if (leafTestResultsPerSource != null)
         {
-            var source = sd.Key;
-            var sourceSummary = new SourceSummary();
-
-            var results = sd.ToArray();
-            // duration of the whole source is the difference between the test that ended last and the one that started first
-            sourceSummary.Duration = !results.Any() ? TimeSpan.Zero : results.Max(r => r.EndTime) - results.Min(r => r.StartTime);
-            foreach (var result in results)
+            foreach (var sd in leafTestResultsPerSource)
             {
-                switch (result.Outcome)
-                {
-                    case TestOutcome.Passed:
-                        sourceSummary.TotalTests++;
-                        sourceSummary.PassedTests++;
-                        break;
-                    case TestOutcome.Failed:
-                        sourceSummary.TotalTests++;
-                        sourceSummary.FailedTests++;
-                        break;
-                    case TestOutcome.Skipped:
-                        sourceSummary.TotalTests++;
-                        sourceSummary.SkippedTests++;
-                        break;
-                    default:
-                        break;
-                }
-            }
+                var source = sd.Key;
+                var sourceSummary = new SourceSummary();
 
-            if (VerbosityLevel is Verbosity.Quiet or Verbosity.Minimal)
-            {
-                TestOutcome sourceOutcome = TestOutcome.None;
-                if (sourceSummary.FailedTests > 0)
+                var results = sd.ToArray();
+                // duration of the whole source is the difference between the test that ended last and the one that started first
+                sourceSummary.Duration = !results.Any() ? TimeSpan.Zero : results.Max(r => r.EndTime) - results.Min(r => r.StartTime);
+                foreach (var result in results)
                 {
-                    sourceOutcome = TestOutcome.Failed;
-                }
-                else if (sourceSummary.PassedTests > 0)
-                {
-                    sourceOutcome = TestOutcome.Passed;
-                }
-                else if (sourceSummary.SkippedTests > 0)
-                {
-                    sourceOutcome = TestOutcome.Skipped;
+                    switch (result.Outcome)
+                    {
+                        case TestOutcome.Passed:
+                            sourceSummary.TotalTests++;
+                            sourceSummary.PassedTests++;
+                            break;
+                        case TestOutcome.Failed:
+                            sourceSummary.TotalTests++;
+                            sourceSummary.FailedTests++;
+                            break;
+                        case TestOutcome.Skipped:
+                            sourceSummary.TotalTests++;
+                            sourceSummary.SkippedTests++;
+                            break;
+                        default:
+                            break;
+                    }
                 }
 
-                string resultString = sourceOutcome switch
-                {
-                    TestOutcome.Failed => (CommandLineResources.FailedTestIndicator + "!").PadRight(LongestResultIndicator),
-                    TestOutcome.Passed => (CommandLineResources.PassedTestIndicator + "!").PadRight(LongestResultIndicator),
-                    TestOutcome.Skipped => (CommandLineResources.SkippedTestIndicator + "!").PadRight(LongestResultIndicator),
-                    _ => CommandLineResources.None.PadRight(LongestResultIndicator),
-                };
-                var failed = sourceSummary.FailedTests.ToString(CultureInfo.CurrentCulture).PadLeft(5);
-                var passed = sourceSummary.PassedTests.ToString(CultureInfo.CurrentCulture).PadLeft(5);
-                var skipped = sourceSummary.SkippedTests.ToString(CultureInfo.CurrentCulture).PadLeft(5);
-                var total = sourceSummary.TotalTests.ToString(CultureInfo.CurrentCulture).PadLeft(5);
-
-
-                var frameworkString = _targetFramework.IsNullOrEmpty()
-                    ? string.Empty
-                    : $"({_targetFramework})";
-
-                var duration = GetFormattedDurationString(sourceSummary.Duration);
-                var sourceName = sd.Key.Split('\\').Last();
-
-                var outputLine = string.Format(CultureInfo.CurrentCulture, CommandLineResources.TestRunSummary,
-                    resultString,
-                    failed,
-                    passed,
-                    skipped,
-                    total,
-                    duration,
-                    sourceName,
-                    frameworkString);
-
-
-                ConsoleColor? color = null;
-                if (sourceOutcome == TestOutcome.Failed)
-                {
-                    color = ConsoleColor.Red;
-                }
-                else if (sourceOutcome == TestOutcome.Passed)
+                if (VerbosityLevel is Verbosity.Quiet or Verbosity.Minimal)
                 {
-                    color = ConsoleColor.Green;
-                }
-                else if (sourceOutcome == TestOutcome.Skipped)
-                {
-                    color = ConsoleColor.Yellow;
-                }
+                    TestOutcome sourceOutcome = TestOutcome.None;
+                    if (sourceSummary.FailedTests > 0)
+                    {
+                        sourceOutcome = TestOutcome.Failed;
+                    }
+                    else if (sourceSummary.PassedTests > 0)
+                    {
+                        sourceOutcome = TestOutcome.Passed;
+                    }
+                    else if (sourceSummary.SkippedTests > 0)
+                    {
+                        sourceOutcome = TestOutcome.Skipped;
+                    }
 
-                if (color != null)
-                {
-                    Output.Write(outputLine, OutputLevel.Information, color.Value);
-                }
-                else
-                {
-                    Output.Write(outputLine, OutputLevel.Information);
+                    string resultString = sourceOutcome switch
+                    {
+                        TestOutcome.Failed => (CommandLineResources.FailedTestIndicator + "!").PadRight(LongestResultIndicator),
+                        TestOutcome.Passed => (CommandLineResources.PassedTestIndicator + "!").PadRight(LongestResultIndicator),
+                        TestOutcome.Skipped => (CommandLineResources.SkippedTestIndicator + "!").PadRight(LongestResultIndicator),
+                        _ => CommandLineResources.None.PadRight(LongestResultIndicator),
+                    };
+                    var failed = sourceSummary.FailedTests.ToString(CultureInfo.CurrentCulture).PadLeft(5);
+                    var passed = sourceSummary.PassedTests.ToString(CultureInfo.CurrentCulture).PadLeft(5);
+                    var skipped = sourceSummary.SkippedTests.ToString(CultureInfo.CurrentCulture).PadLeft(5);
+                    var total = sourceSummary.TotalTests.ToString(CultureInfo.CurrentCulture).PadLeft(5);
+
+
+                    var frameworkString = _targetFramework.IsNullOrEmpty()
+                        ? string.Empty
+                        : $"({_targetFramework})";
+
+                    var duration = GetFormattedDurationString(sourceSummary.Duration);
+                    var sourceName = sd.Key.Split('\\').Last();
+
+                    var outputLine = string.Format(CultureInfo.CurrentCulture, CommandLineResources.TestRunSummary,
+                        resultString,
+                        failed,
+                        passed,
+                        skipped,
+                        total,
+                        duration,
+                        sourceName,
+                        frameworkString);
+
+
+                    ConsoleColor? color = null;
+                    if (sourceOutcome == TestOutcome.Failed)
+                    {
+                        color = ConsoleColor.Red;
+                    }
+                    else if (sourceOutcome == TestOutcome.Passed)
+                    {
+                        color = ConsoleColor.Green;
+                    }
+                    else if (sourceOutcome == TestOutcome.Skipped)
+                    {
+                        color = ConsoleColor.Yellow;
+                    }
+
+                    if (color != null)
+                    {
+                        Output.Write(outputLine, OutputLevel.Information, color.Value);
+                    }
+                    else
+                    {
+                        Output.Write(outputLine, OutputLevel.Information);
+                    }
+
+                    Output.Information(false, CommandLineResources.TestRunSummaryAssemblyAndFramework,
+                        sourceName,
+                        frameworkString);
                 }
 
-                Output.Information(false, CommandLineResources.TestRunSummaryAssemblyAndFramework,
-                    sourceName,
-                    frameworkString);
+                passedTests += sourceSummary.PassedTests;
+                failedTests += sourceSummary.FailedTests;
+                skippedTests += sourceSummary.SkippedTests;
+                totalTests += sourceSummary.TotalTests;
             }
-
-            passedTests += sourceSummary.PassedTests;
-            failedTests += sourceSummary.FailedTests;
-            skippedTests += sourceSummary.SkippedTests;
-            totalTests += sourceSummary.TotalTests;
         }
 
         if (VerbosityLevel is Verbosity.Quiet or Verbosity.Minimal)
diff --git a/src/vstest.console/Internal/ProgressIndicator.cs b/src/vstest.console/Internal/ProgressIndicator.cs
index 0821ca4b69..1b21b1e15b 100644
--- a/src/vstest.console/Internal/ProgressIndicator.cs
+++ b/src/vstest.console/Internal/ProgressIndicator.cs
@@ -100,7 +100,7 @@ public void Stop()
         }
     }
 
-    private void Timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
+    private void Timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
     {
         if (IsRunning)
         {
diff --git a/src/vstest.console/Processors/EnableBlameArgumentProcessor.cs b/src/vstest.console/Processors/EnableBlameArgumentProcessor.cs
index 91bbb29359..639cf95b8a 100644
--- a/src/vstest.console/Processors/EnableBlameArgumentProcessor.cs
+++ b/src/vstest.console/Processors/EnableBlameArgumentProcessor.cs
@@ -188,7 +188,7 @@ private void InitializeBlame(bool enableCrashDump, bool enableHangDump, Dictiona
         var settings = _runSettingsManager.ActiveRunSettings?.SettingsXml;
 
         // Get results directory from RunSettingsManager
-        var resultsDirectory = GetResultsDirectory(settings);
+        var resultsDirectory = GetResultsDirectory(settings)!;
 
         // Get data collection run settings. Create if not present.
         var dataCollectionRunSettings = XmlRunSettingsUtilities.GetDataCollectionRunSettings(settings);
@@ -205,8 +205,9 @@ private void InitializeBlame(bool enableCrashDump, bool enableHangDump, Dictiona
         if (enableCrashDump)
         {
             var dumpParameters = collectDumpParameters
-                .Where(p => new[] { "CollectAlways", "DumpType" }.Contains(p.Key, StringComparer.OrdinalIgnoreCase))
-                .ToDictionary(p => p.Key, p => p.Value, StringComparer.OrdinalIgnoreCase);
+                ?.Where(p => new[] { "CollectAlways", "DumpType" }.Contains(p.Key, StringComparer.OrdinalIgnoreCase))
+                .ToDictionary(p => p.Key, p => p.Value, StringComparer.OrdinalIgnoreCase)
+                ?? new Dictionary<string, string>();
 
             if (!dumpParameters.ContainsKey("DumpType"))
             {
@@ -220,8 +221,9 @@ private void InitializeBlame(bool enableCrashDump, bool enableHangDump, Dictiona
         if (enableHangDump)
         {
             var hangDumpParameters = collectDumpParameters
-                .Where(p => new[] { "TestTimeout", "HangDumpType" }.Contains(p.Key, StringComparer.OrdinalIgnoreCase))
-                .ToDictionary(p => p.Key, p => p.Value, StringComparer.OrdinalIgnoreCase);
+                ?.Where(p => new[] { "TestTimeout", "HangDumpType" }.Contains(p.Key, StringComparer.OrdinalIgnoreCase))
+                .ToDictionary(p => p.Key, p => p.Value, StringComparer.OrdinalIgnoreCase)
+                ?? new Dictionary<string, string>();
 
             if (!hangDumpParameters.ContainsKey("TestTimeout"))
             {
@@ -281,7 +283,7 @@ private void InitializeBlame(bool enableCrashDump, bool enableHangDump, Dictiona
     /// <param name="parameters">Parameters.</param>
     /// <param name="xmlDocument">Xml document.</param>
     /// <param name="outernode">Outer node.</param>
-    private static void AddCollectDumpNode(Dictionary<string, string> parameters, XmlDocument xmlDocument, XmlElement outernode)
+    private static void AddCollectDumpNode(Dictionary<string, string>? parameters, XmlDocument xmlDocument, XmlElement outernode)
     {
         var dumpNode = xmlDocument.CreateElement(Constants.BlameCollectDumpKey);
         if (parameters != null && parameters.Count > 0)
diff --git a/src/vstest.console/Processors/EnableCodeCoverageArgumentProcessor.cs b/src/vstest.console/Processors/EnableCodeCoverageArgumentProcessor.cs
index 5b297ed38a..f2b01b973f 100644
--- a/src/vstest.console/Processors/EnableCodeCoverageArgumentProcessor.cs
+++ b/src/vstest.console/Processors/EnableCodeCoverageArgumentProcessor.cs
@@ -211,8 +211,7 @@ private void UpdateWithCodeCoverageSettingsIfNotConfigured()
             runSettingsDocument = document;
         }
 
-        var runSettingsNavigator = runSettingsDocument.CreateNavigator();
-
+        var runSettingsNavigator = runSettingsDocument.CreateNavigator()!;
         if (ContainsDataCollectorWithFriendlyName(runSettingsNavigator, FriendlyName))
         {
             // runsettings already has Code coverage data collector, just enable it.
@@ -244,15 +243,15 @@ private void UpdateWithCodeCoverageSettingsIfNotConfigured()
             XPathNavigator dataCollectorsNavigator;
             if (existingPath.Equals(xpaths[2]) == false)
             {
-                dataCollectorsNavigator = runSettingsNavigator.SelectSingleNode(existingPath);
+                dataCollectorsNavigator = runSettingsNavigator.SelectSingleNode(existingPath)!;
                 var missingNodesText = GetMissingNodesTextIfAny(existingPath, xpaths[2]);
                 dataCollectorsNavigator.AppendChild(missingNodesText);
             }
 
-            dataCollectorsNavigator = runSettingsNavigator.SelectSingleNode(xpaths[2]);
+            dataCollectorsNavigator = runSettingsNavigator.SelectSingleNode(xpaths[2])!;
             dataCollectorsNavigator.AppendChild(CodeCoverageCollectorSettingsTemplate);
 
-            _runSettingsManager.UpdateRunSettings(runSettingsDocument.CreateNavigator().OuterXml);
+            _runSettingsManager.UpdateRunSettings(runSettingsDocument.CreateNavigator()!.OuterXml);
         }
     }
 
@@ -283,7 +282,7 @@ private static bool ContainsDataCollectorWithFriendlyName(IXPathNavigable runSet
         _ = runSettingDocument ?? throw new ArgumentNullException(nameof(runSettingDocument));
         _ = dataCollectorFriendlyName ?? throw new ArgumentNullException(nameof(dataCollectorFriendlyName));
 
-        var navigator = runSettingDocument.CreateNavigator();
+        var navigator = runSettingDocument.CreateNavigator()!;
         var nodes = navigator.Select("/RunSettings/DataCollectionRunSettings/DataCollectors/DataCollector");
 
         foreach (XPathNavigator? dataCollectorNavigator in nodes)
diff --git a/src/vstest.console/Processors/ListFullyQualifiedTestsArgumentProcessor.cs b/src/vstest.console/Processors/ListFullyQualifiedTestsArgumentProcessor.cs
index dfed7542a0..f6580388e6 100644
--- a/src/vstest.console/Processors/ListFullyQualifiedTestsArgumentProcessor.cs
+++ b/src/vstest.console/Processors/ListFullyQualifiedTestsArgumentProcessor.cs
@@ -222,7 +222,7 @@ private void DiscoveryRequest_OnDiscoveredTests(object? sender, DiscoveredTestsE
 
             // Initializing the test case filter here because the filter value is read late.
             TestCaseFilter.Initialize(_options.TestCaseFilterValue);
-            var discoveredTests = args.DiscoveredTestCases.ToList();
+            var discoveredTests = args.DiscoveredTestCases!.ToList();
             var filteredTests = TestCaseFilter.FilterTests(discoveredTests).ToList();
 
             // remove any duplicate tests
diff --git a/src/vstest.console/Processors/RunSpecificTestsArgumentProcessor.cs b/src/vstest.console/Processors/RunSpecificTestsArgumentProcessor.cs
index fb39297d34..dde4d55320 100644
--- a/src/vstest.console/Processors/RunSpecificTestsArgumentProcessor.cs
+++ b/src/vstest.console/Processors/RunSpecificTestsArgumentProcessor.cs
@@ -272,6 +272,7 @@ private void ExecuteSelectedTests()
     private void DiscoveryRequest_OnDiscoveredTests(object? sender, DiscoveredTestsEventArgs args)
     {
         TPDebug.Assert(_selectedTestNames != null, "Initialize should have been called");
+        TPDebug.Assert(args.DiscoveredTestCases != null);
 
         _discoveredTestCount += args.DiscoveredTestCases.Count();
         foreach (var testCase in args.DiscoveredTestCases!)
diff --git a/src/vstest.console/TestPlatformHelpers/TestRequestManager.cs b/src/vstest.console/TestPlatformHelpers/TestRequestManager.cs
index ee1f67b6e1..642e36bb9e 100644
--- a/src/vstest.console/TestPlatformHelpers/TestRequestManager.cs
+++ b/src/vstest.console/TestPlatformHelpers/TestRequestManager.cs
@@ -671,7 +671,7 @@ protected virtual void Dispose(bool disposing)
             XmlRunSettingsUtilities.ReaderSettings);
         var document = new XmlDocument();
         document.Load(reader);
-        var navigator = document.CreateNavigator();
+        var navigator = document.CreateNavigator()!;
         var runConfiguration = XmlRunSettingsUtilities.GetRunConfigurationNode(runsettingsXml);
         var loggerRunSettings = XmlRunSettingsUtilities.GetLoggerRunSettings(runsettingsXml)
                                 ?? new LoggerRunSettings();

From 1d03b9db3dd25851db82fe5005d509eb431a39de Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Thu, 18 Aug 2022 17:36:01 +0200
Subject: [PATCH 03/17] Warnings fixed.

---
 .editorconfig                                 |  3 +-
 src/AttachVS/AttachVs.cs                      |  6 +-
 .../ManagedNameHelper.Reflection.cs           |  8 +-
 .../BlameCollector.cs                         |  4 +-
 .../BlameLogger.cs                            |  2 +-
 .../InactivityTimer.cs                        |  2 +-
 .../Interfaces/INativeMethodsHelper.cs        |  2 +-
 .../ProcDumpArgsBuilder.cs                    | 18 +++-
 .../ProcDumpDumper.cs                         |  7 +-
 .../PublicAPI/PublicAPI.Shipped.txt           |  2 +-
 .../WindowsHangDumper.cs                      |  6 +-
 .../XmlReaderWriter.cs                        | 18 +++-
 .../HtmlLogger.cs                             |  6 +-
 src/SettingsMigrator/Migrator.cs              | 89 +++++++++++--------
 src/SettingsMigrator/PathResolver.cs          |  2 +-
 src/vstest.console/vstest.console.csproj      |  4 +
 16 files changed, 113 insertions(+), 66 deletions(-)

diff --git a/.editorconfig b/.editorconfig
index 13425039fb..8cd964cd3f 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -312,7 +312,7 @@ csharp_prefer_simple_default_expression = true:suggestion
 csharp_style_deconstructed_variable_declaration = true:suggestion
 csharp_style_inlined_variable_declaration = true:suggestion
 csharp_style_prefer_local_over_anonymous_function = false:suggestion # not default, default is true, avoided because we use anonymous functions in multiple places and it does not make the code clearer
-csharp_style_prefer_index_operator = true:suggestion
+csharp_style_prefer_index_operator = false:suggestion # not default, default is true, disabled because Index operator is not supported in all the TFMs we support.
 csharp_style_prefer_range_operator = false:suggestion # not default, default is true, disabled because Range operator is not supported in all the TFMs we support.
 csharp_style_throw_expression = true:suggestion
 csharp_style_unused_value_assignment_preference = discard_variable:suggestion
@@ -334,7 +334,6 @@ dotnet_diagnostic.IDE0055.severity = warning # ensure all formatting rules are e
 # IDE0057: Use range operator
 dotnet_diagnostic.IDE0057.severity = none # Range operator is not supported in some TFMs.
 
-
 #### C# Formatting Rules ####
 
 # New line preferences
diff --git a/src/AttachVS/AttachVs.cs b/src/AttachVS/AttachVs.cs
index 1d712c0d5f..978ec61b49 100644
--- a/src/AttachVS/AttachVs.cs
+++ b/src/AttachVS/AttachVs.cs
@@ -133,9 +133,9 @@ private static bool AttachVs(Process vs, int pid)
                     {
                         try
                         {
-                            dbg = dte.GetType().InvokeMember("Debugger", BindingFlags.GetProperty, null, dte, null, CultureInfo.InvariantCulture);
-                            lps = dbg.GetType().InvokeMember("LocalProcesses", BindingFlags.GetProperty, null, dbg, null, CultureInfo.InvariantCulture);
-                            var lpn = (System.Collections.IEnumerator)lps.GetType().InvokeMember("GetEnumerator", BindingFlags.InvokeMethod, null, lps, null, CultureInfo.InvariantCulture);
+                            dbg = dte.GetType().InvokeMember("Debugger", BindingFlags.GetProperty, null, dte, null, CultureInfo.InvariantCulture)!;
+                            lps = dbg.GetType().InvokeMember("LocalProcesses", BindingFlags.GetProperty, null, dbg, null, CultureInfo.InvariantCulture)!;
+                            var lpn = (System.Collections.IEnumerator)lps.GetType().InvokeMember("GetEnumerator", BindingFlags.InvokeMethod, null, lps, null, CultureInfo.InvariantCulture)!;
 
                             while (lpn.MoveNext())
                             {
diff --git a/src/Microsoft.TestPlatform.AdapterUtilities/ManagedNameUtilities/ManagedNameHelper.Reflection.cs b/src/Microsoft.TestPlatform.AdapterUtilities/ManagedNameUtilities/ManagedNameHelper.Reflection.cs
index 078aea9b6a..67b6d2c22b 100644
--- a/src/Microsoft.TestPlatform.AdapterUtilities/ManagedNameUtilities/ManagedNameHelper.Reflection.cs
+++ b/src/Microsoft.TestPlatform.AdapterUtilities/ManagedNameUtilities/ManagedNameHelper.Reflection.cs
@@ -193,7 +193,7 @@ private static void GetManagedNameAndHierarchy(MethodBase method, bool useClosed
         hierarchyValues[HierarchyConstants.Levels.TestGroupIndex] = managedMethodName.Substring(0, methodNameEndIndex);
         hierarchyValues[HierarchyConstants.Levels.ClassIndex] = managedTypeName.Substring(hierarchyPos[1] + 1, hierarchyPos[2] - hierarchyPos[1] - 1);
         hierarchyValues[HierarchyConstants.Levels.NamespaceIndex] = managedTypeName.Substring(hierarchyPos[0], hierarchyPos[1] - hierarchyPos[0]);
-        hierarchyValues[HierarchyConstants.Levels.ContainerIndex] = method.DeclaringType.GetTypeInfo().Assembly.GetName().Name;
+        hierarchyValues[HierarchyConstants.Levels.ContainerIndex] = method.DeclaringType?.GetTypeInfo()?.Assembly?.GetName()?.Name ?? string.Empty;
     }
 
     /// <summary>
@@ -427,7 +427,11 @@ private static void AppendMethodString(StringBuilder methodBuilder, string name,
 
         if (arity > 0 && methodArity == arity)
         {
-            methodBuilder.Append($"`{arity}");
+            methodBuilder.Append(
+#if NET6_0_OR_GREATER
+                System.Globalization.CultureInfo.InvariantCulture,
+#endif
+                $"`{arity}");
         }
     }
 
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/BlameCollector.cs b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/BlameCollector.cs
index a31eabcd05..843987cacd 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/BlameCollector.cs
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/BlameCollector.cs
@@ -540,7 +540,7 @@ private void SessionEndedHandler(object? sender, SessionEndEventArgs args)
     /// </summary>
     /// <param name="sender">Sender</param>
     /// <param name="args">TestHostLaunchedEventArgs</param>
-    private void TestHostLaunchedHandler(object sender, TestHostLaunchedEventArgs args)
+    private void TestHostLaunchedHandler(object? sender, TestHostLaunchedEventArgs args)
     {
         ResetInactivityTimer();
         _testHostProcessId = args.TestHostProcessId;
@@ -634,7 +634,7 @@ private string GetDumpDirectory()
         var dumpDirectoryOverrideHasValue = !dumpDirectoryOverride.IsNullOrWhiteSpace();
         _uploadDumpFiles = !dumpDirectoryOverrideHasValue;
 
-        var dumpDirectory = dumpDirectoryOverrideHasValue ? dumpDirectoryOverride : GetTempDirectory();
+        var dumpDirectory = dumpDirectoryOverrideHasValue ? dumpDirectoryOverride! : GetTempDirectory();
         Directory.CreateDirectory(dumpDirectory);
         var dumpPath = Path.Combine(Path.GetFullPath(dumpDirectory));
 
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/BlameLogger.cs b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/BlameLogger.cs
index 63e9f0aacf..f139bb90f2 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/BlameLogger.cs
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/BlameLogger.cs
@@ -78,7 +78,7 @@ public void Initialize(TestLoggerEvents events, string? testRunDictionary)
     /// </summary>
     /// <param name="sender">Sender</param>
     /// <param name="e">TestRunCompleteEventArgs</param>
-    private void TestRunCompleteHandler(object sender, TestRunCompleteEventArgs e)
+    private void TestRunCompleteHandler(object? sender, TestRunCompleteEventArgs e)
     {
         ValidateArg.NotNull(sender, nameof(sender));
         ValidateArg.NotNull(e, nameof(e));
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/InactivityTimer.cs b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/InactivityTimer.cs
index 31470107a4..5c9e374ab2 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/InactivityTimer.cs
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/InactivityTimer.cs
@@ -17,7 +17,7 @@ public class InactivityTimer : IInactivityTimer
     /// <param name="timerCallback">Function to callback once the timer times out.</param>
     public InactivityTimer(Action timerCallback)
     {
-        _timer = new Timer((object state) => timerCallback());
+        _timer = new Timer((object? state) => timerCallback());
     }
 
     /// <inheritdoc />
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Interfaces/INativeMethodsHelper.cs b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Interfaces/INativeMethodsHelper.cs
index c011f79f47..da7306168c 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Interfaces/INativeMethodsHelper.cs
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Interfaces/INativeMethodsHelper.cs
@@ -12,5 +12,5 @@ public interface INativeMethodsHelper
     /// </summary>
     /// <param name="processHandle">Process Handle</param>
     /// <returns>Bool for Is64Bit</returns>
-    bool Is64Bit(IntPtr processHandle);
+    bool Is64Bit(nint processHandle);
 }
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/ProcDumpArgsBuilder.cs b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/ProcDumpArgsBuilder.cs
index 5d5f07fecd..467c8961af 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/ProcDumpArgsBuilder.cs
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/ProcDumpArgsBuilder.cs
@@ -38,10 +38,18 @@ public string BuildTriggerBasedProcDumpArgs(int processId, string filename, IEnu
 
         foreach (var exceptionFilter in procDumpExceptionsList)
         {
-            procDumpArgument.Append($"-f {exceptionFilter} ");
+            procDumpArgument.Append(
+#if NET7_0_OR_GREATER
+                System.Globalization.CultureInfo.InvariantCulture,
+#endif
+                $"-f {exceptionFilter} ");
         }
 
-        procDumpArgument.Append($"{processId} {filename}.dmp");
+        procDumpArgument.Append(
+#if NET7_0_OR_GREATER
+                System.Globalization.CultureInfo.InvariantCulture,
+#endif
+                $"{processId} {filename}.dmp");
         var argument = procdumpArgumentsFromEnv.IsNullOrWhiteSpace() ? procDumpArgument.ToString() : procdumpArgumentsFromEnv;
         if (!argument.ToUpperInvariant().Contains("-accepteula".ToUpperInvariant()))
         {
@@ -63,7 +71,11 @@ public string BuildHangBasedProcDumpArgs(int processId, string filename, bool is
             procDumpArgument.Append(" -ma");
         }
 
-        procDumpArgument.Append($" {processId} {filename}.dmp");
+        procDumpArgument.Append(
+#if NET7_0_OR_GREATER
+                System.Globalization.CultureInfo.InvariantCulture,
+#endif
+                $" {processId} {filename}.dmp");
         var argument = procDumpArgument.ToString();
 
         return argument;
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/ProcDumpDumper.cs b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/ProcDumpDumper.cs
index a8295236f1..0752e9a95a 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/ProcDumpDumper.cs
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/ProcDumpDumper.cs
@@ -168,8 +168,7 @@ public IEnumerable<string> GetDumpFiles(bool processCrashed)
         // There can be more dumps in the crash folder from the child processes that were .NET5 or newer and crashed
         // get only the ones that match the path we provide to procdump. And get the last one created.
         var allTargetProcessDumps = allDumps
-            .Where(dump => Path.GetFileNameWithoutExtension(dump)
-                .StartsWith(_outputFilePrefix))
+            .Where(dump => Path.GetFileNameWithoutExtension(dump).StartsWith(_outputFilePrefix ?? string.Empty))
             .Select(dump => new FileInfo(dump))
             .OrderBy(dump => dump.LastWriteTime).ThenBy(dump => dump.Name)
             .ToList();
@@ -285,7 +284,7 @@ private bool TryGetProcDumpExecutable(int processId, out string path)
 
         if (!searchPath)
         {
-            var candidatePath = Path.Combine(procdumpDirectory, filename);
+            var candidatePath = Path.Combine(procdumpDirectory!, filename);
             if (File.Exists(candidatePath))
             {
                 EqtTrace.Verbose($"ProcDumpDumper.GetProcDumpExecutable: Path to ProcDump '{candidatePath}' exists, using that.");
@@ -311,7 +310,7 @@ private bool TryGetProcDumpExecutable(int processId, out string path)
     private bool TryGetExecutablePath(string executable, out string executablePath)
     {
         executablePath = string.Empty;
-        var pathString = Environment.GetEnvironmentVariable("PATH");
+        var pathString = Environment.GetEnvironmentVariable("PATH") ?? string.Empty;
         foreach (string path in pathString.Split(Path.PathSeparator))
         {
             string exeFullPath = Path.Combine(path.Trim(), executable);
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/PublicAPI.Shipped.txt
index c06ec39dd6..a5ac44b058 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/PublicAPI.Shipped.txt
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/PublicAPI/PublicAPI.Shipped.txt
@@ -51,7 +51,7 @@ Microsoft.TestPlatform.Extensions.BlameDataCollector.InactivityTimer.Dispose() -
 Microsoft.TestPlatform.Extensions.BlameDataCollector.InactivityTimer.InactivityTimer(System.Action! timerCallback) -> void
 Microsoft.TestPlatform.Extensions.BlameDataCollector.InactivityTimer.ResetTimer(System.TimeSpan inactivityTimespan) -> void
 Microsoft.TestPlatform.Extensions.BlameDataCollector.INativeMethodsHelper
-Microsoft.TestPlatform.Extensions.BlameDataCollector.INativeMethodsHelper.Is64Bit(System.IntPtr processHandle) -> bool
+Microsoft.TestPlatform.Extensions.BlameDataCollector.INativeMethodsHelper.Is64Bit(nint processHandle) -> bool
 Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcDumpArgsBuilder
 Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcDumpArgsBuilder.BuildHangBasedProcDumpArgs(int processId, string! filename, bool isFullDump) -> string!
 Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcDumpArgsBuilder.BuildTriggerBasedProcDumpArgs(int processId, string! filename, System.Collections.Generic.IEnumerable<string!>! procDumpExceptionsList, bool isFullDump) -> string!
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/WindowsHangDumper.cs b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/WindowsHangDumper.cs
index 67097bd268..c5783adc54 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/WindowsHangDumper.cs
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/WindowsHangDumper.cs
@@ -131,17 +131,17 @@ internal static void CollectDump(IProcessHelper processHelper, Process process,
                 PlatformArchitecture.X86 => "DumpMinitool.x86.exe",
                 PlatformArchitecture.X64 => "DumpMinitool.exe",
                 PlatformArchitecture.ARM64 => "DumpMinitool.arm64.exe",
-                _ => null
+                _ => string.Empty
             };
 
-            if (dumpMinitoolName == null)
+            if (dumpMinitoolName == string.Empty)
             {
                 EqtTrace.Verbose($"WindowsHangDumper.CollectDump: The target process architecture is {targetProcessArchitecture}, we don't have a DumpMinitool for that, falling back to using PInvoke directly.");
                 MiniDumpWriteDump.CollectDumpUsingMiniDumpWriteDump(process, outputFile, FromDumpType(type));
             }
 
             var args = $"--file \"{outputFile}\" --processId {process.Id} --dumpType {type}";
-            var dumpMinitoolPath = Path.Combine(Path.GetDirectoryName(Assembly.GetCallingAssembly().Location), "dump", dumpMinitoolName);
+            var dumpMinitoolPath = Path.Combine(Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)!, "dump", dumpMinitoolName);
             EqtTrace.Verbose($"WindowsHangDumper.CollectDump: The target process architecture is {targetProcessArchitecture}, dumping it via {dumpMinitoolName}.");
 
             if (!File.Exists(dumpMinitoolPath))
diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/XmlReaderWriter.cs b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/XmlReaderWriter.cs
index 069977f2b1..fa12724d96 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/XmlReaderWriter.cs
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/XmlReaderWriter.cs
@@ -120,15 +120,25 @@ public List<BlameTestObject> ReadTestSequence(string filePath)
             }
 
             var root = xmlDocument.LastChild;
+            if (root == null)
+            {
+                return testCaseList;
+            }
+
             foreach (XmlNode node in root)
             {
+                if (node?.Attributes == null)
+                {
+                    continue;
+                }
+
                 var testCase = new BlameTestObject
                 {
                     FullyQualifiedName =
-                        node.Attributes[Constants.TestNameAttribute].Value,
-                    Source = node.Attributes[Constants.TestSourceAttribute].Value,
-                    DisplayName = node.Attributes[Constants.TestDisplayNameAttribute].Value,
-                    IsCompleted = node.Attributes[Constants.TestCompletedAttribute].Value == "True"
+                        node.Attributes[Constants.TestNameAttribute]?.Value,
+                    Source = node.Attributes[Constants.TestSourceAttribute]?.Value,
+                    DisplayName = node.Attributes[Constants.TestDisplayNameAttribute]?.Value,
+                    IsCompleted = node.Attributes[Constants.TestCompletedAttribute]?.Value == "True"
                 };
                 testCaseList.Add(testCase);
             }
diff --git a/src/Microsoft.TestPlatform.Extensions.HtmlLogger/HtmlLogger.cs b/src/Microsoft.TestPlatform.Extensions.HtmlLogger/HtmlLogger.cs
index bf92b662b8..6d979825b5 100644
--- a/src/Microsoft.TestPlatform.Extensions.HtmlLogger/HtmlLogger.cs
+++ b/src/Microsoft.TestPlatform.Extensions.HtmlLogger/HtmlLogger.cs
@@ -290,13 +290,13 @@ public void TestRunCompleteHandler(object? sender, TestRunCompleteEventArgs e)
             }
 
             logFilePrefixValue = logFilePrefixValue + DateTime.Now.ToString("_yyyyMMddHHmmss", DateTimeFormatInfo.InvariantInfo) + $".{HtmlLoggerConstants.HtmlFileExtension}";
-            HtmlFilePath = Path.Combine(TestResultsDirPath, logFilePrefixValue);
+            HtmlFilePath = Path.Combine(TestResultsDirPath!, logFilePrefixValue);
         }
         else
         {
             if (_parametersDictionary.TryGetValue(HtmlLoggerConstants.LogFileNameKey, out string? logFileNameValue) && !logFileNameValue.IsNullOrWhiteSpace())
             {
-                HtmlFilePath = Path.Combine(TestResultsDirPath, logFileNameValue);
+                HtmlFilePath = Path.Combine(TestResultsDirPath!, logFileNameValue);
             }
         }
 
@@ -351,7 +351,7 @@ private string GenerateUniqueFilePath(string fileName, string fileExtension)
         for (short i = 0; i < short.MaxValue; i++)
         {
             var fileNameWithIter = i == 0 ? fileName : Path.GetFileNameWithoutExtension(fileName) + $"[{i}]";
-            fullFilePath = Path.Combine(TestResultsDirPath, $"TestResult_{fileNameWithIter}.{fileExtension}");
+            fullFilePath = Path.Combine(TestResultsDirPath!, $"TestResult_{fileNameWithIter}.{fileExtension}");
             lock (FileCreateLockObject)
             {
                 if (!File.Exists(fullFilePath))
diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index bd0f02bd3d..c5f08938ad 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -101,8 +101,7 @@ private static void MigrateRunSettings(string oldRunSettingsPath, string newRunS
         runSettingsXmlDoc.Load(reader);
         var root = runSettingsXmlDoc.DocumentElement;
 
-        var testSettingsNode = root.SelectSingleNode(@"/RunSettings/MSTest/SettingsFile");
-
+        var testSettingsNode = root?.SelectSingleNode(@"/RunSettings/MSTest/SettingsFile");
         if (testSettingsNode != null)
         {
             testSettingsPath = testSettingsNode.InnerText;
@@ -113,7 +112,7 @@ private static void MigrateRunSettings(string oldRunSettingsPath, string newRunS
             // Expand path relative to runSettings location.
             if (!Path.IsPathRooted(testSettingsPath))
             {
-                testSettingsPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(oldRunSettingsPath), testSettingsPath));
+                testSettingsPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(oldRunSettingsPath)!, testSettingsPath));
             }
 
             // Remove the embedded testSettings node if it exists.
@@ -153,57 +152,57 @@ private static void MigrateTestSettings(string oldTestSettingsPath, string newRu
     /// <param name="runSettingsXmlDoc">Runsettings Xml</param>
     private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPath, XmlDocument runSettingsXmlDoc)
     {
-        var testSettingsNodes = ReadTestSettingsNodes(testSettingsPath);
+        TestSettingsNodes testSettingsNodes = ReadTestSettingsNodes(testSettingsPath);
 
         string? testTimeout = null;
-        if (testSettingsNodes.Timeout != null && testSettingsNodes.Timeout.Attributes[TestTimeoutAttributeName] != null)
+        if (testSettingsNodes?.Timeout?.Attributes?[TestTimeoutAttributeName] != null)
         {
-            testTimeout = testSettingsNodes.Timeout.Attributes[TestTimeoutAttributeName].Value;
+            testTimeout = testSettingsNodes?.Timeout?.Attributes?[TestTimeoutAttributeName]?.Value;
         }
 
         string? runTimeout = null;
-        if (testSettingsNodes.Timeout != null && testSettingsNodes.Timeout.Attributes[RunTimeoutAttributeName] != null)
+        if (testSettingsNodes?.Timeout?.Attributes?[RunTimeoutAttributeName] != null)
         {
-            runTimeout = testSettingsNodes.Timeout.Attributes[RunTimeoutAttributeName].Value;
+            runTimeout = testSettingsNodes?.Timeout?.Attributes?[RunTimeoutAttributeName]?.Value;
         }
 
         string? parallelTestCount = null;
-        if (testSettingsNodes.Execution != null && testSettingsNodes.Execution.Attributes[ParallelTestCountAttributeName] != null)
+        if (testSettingsNodes?.Execution?.Attributes?[ParallelTestCountAttributeName] != null)
         {
-            parallelTestCount = testSettingsNodes.Execution.Attributes[ParallelTestCountAttributeName].Value;
+            parallelTestCount = testSettingsNodes?.Execution?.Attributes?[ParallelTestCountAttributeName]?.Value;
         }
 
         string? hostProcessPlatform = null;
-        if (testSettingsNodes.Execution != null && testSettingsNodes.Execution.Attributes[HostProcessPlatformAttributeName] != null)
+        if (testSettingsNodes?.Execution?.Attributes?[HostProcessPlatformAttributeName] != null)
         {
-            hostProcessPlatform = testSettingsNodes.Execution.Attributes[HostProcessPlatformAttributeName].Value;
+            hostProcessPlatform = testSettingsNodes?.Execution?.Attributes?[HostProcessPlatformAttributeName]?.Value;
         }
 
         // WebTestRunConfiguration node.
-        if (testSettingsNodes.WebSettings != null)
+        if (testSettingsNodes?.WebSettings != null)
         {
-            runSettingsXmlDoc.DocumentElement.AppendChild(runSettingsXmlDoc.ImportNode(testSettingsNodes.WebSettings, deep: true));
+            runSettingsXmlDoc?.DocumentElement?.AppendChild(runSettingsXmlDoc.ImportNode(testSettingsNodes.WebSettings, deep: true));
         }
 
         // LegacySettings node.
-        AddLegacyNodes(testSettingsNodes, testTimeout, parallelTestCount, hostProcessPlatform, runSettingsXmlDoc);
+        AddLegacyNodes(testSettingsNodes!, testTimeout, parallelTestCount, hostProcessPlatform, runSettingsXmlDoc!);
 
         // TestSessionTimeout node.
         if (!runTimeout.IsNullOrEmpty())
         {
-            AddRunTimeoutNode(runTimeout, runSettingsXmlDoc);
+            AddRunTimeoutNode(runTimeout, runSettingsXmlDoc!);
         }
 
         // DataCollectors node.
-        if (testSettingsNodes.Datacollectors != null && testSettingsNodes.Datacollectors.Count > 0)
+        if (testSettingsNodes?.Datacollectors != null && testSettingsNodes.Datacollectors.Count > 0)
         {
-            AddDataCollectorNodes(testSettingsNodes.Datacollectors, runSettingsXmlDoc);
+            AddDataCollectorNodes(testSettingsNodes.Datacollectors, runSettingsXmlDoc!);
         }
     }
 
     private static TestSettingsNodes ReadTestSettingsNodes(string testSettingsPath)
     {
-        var testSettingsNodes = new TestSettingsNodes();
+        TestSettingsNodes testSettingsNodes = new();
 
         using (XmlTextReader reader = new(testSettingsPath))
         {
@@ -211,7 +210,7 @@ private static TestSettingsNodes ReadTestSettingsNodes(string testSettingsPath)
 
             var testSettingsXmlDoc = new XmlDocument();
             testSettingsXmlDoc.Load(reader);
-            var testSettingsRoot = testSettingsXmlDoc.DocumentElement;
+            var testSettingsRoot = testSettingsXmlDoc.DocumentElement!;
 
             // Select the interesting nodes from the xml.
             testSettingsNodes.Deployment = testSettingsRoot.SelectSingleNode(@"/TestSettings/Deployment");
@@ -223,14 +222,14 @@ private static TestSettingsNodes ReadTestSettingsNodes(string testSettingsPath)
             testSettingsNodes.Hosts = testSettingsRoot.SelectSingleNode(@"/TestSettings/Execution/Hosts");
             testSettingsNodes.Execution = testSettingsRoot.SelectSingleNode(@"/TestSettings/Execution");
 
-            if (testSettingsNodes.Timeout != null && (testSettingsNodes.Timeout.Attributes[AgentNotRespondingTimeoutAttribute] != null ||
-                                                      testSettingsNodes.Timeout.Attributes[DeploymentTimeoutAttribute] != null || testSettingsNodes.Timeout.Attributes[ScriptTimeoutAttribute] != null))
+            if (testSettingsNodes.Timeout != null && (testSettingsNodes?.Timeout?.Attributes?[AgentNotRespondingTimeoutAttribute] != null ||
+                                                      testSettingsNodes?.Timeout?.Attributes?[DeploymentTimeoutAttribute] != null || testSettingsNodes?.Timeout?.Attributes?[ScriptTimeoutAttribute] != null))
             {
                 Console.WriteLine(CommandLineResources.UnsupportedAttributes);
             }
         }
 
-        return testSettingsNodes;
+        return testSettingsNodes!;
     }
 
     /// <summary>
@@ -239,10 +238,10 @@ private static TestSettingsNodes ReadTestSettingsNodes(string testSettingsPath)
     /// <param name="newXmlDoc">Xml doc to process</param>
     private static void RemoveEmbeddedTestSettings(XmlDocument newXmlDoc)
     {
-        var testSettingsNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest/SettingsFile");
+        var testSettingsNode = newXmlDoc?.DocumentElement?.SelectSingleNode(@"/RunSettings/MSTest/SettingsFile");
         if (testSettingsNode != null)
         {
-            testSettingsNode.ParentNode.RemoveChild(testSettingsNode);
+            testSettingsNode?.ParentNode?.RemoveChild(testSettingsNode);
         }
     }
 
@@ -267,6 +266,11 @@ private static void AddLegacyNodes(TestSettingsNodes testSettingsNodes, string?
             return;
         }
 
+        if (newXmlDoc?.DocumentElement == null)
+        {
+            return;
+        }
+
         // Add ForcedLegacy node.
         var mstestNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest");
         XmlNode forcedLegacyNode;
@@ -277,19 +281,24 @@ private static void AddLegacyNodes(TestSettingsNodes testSettingsNodes, string?
             mstestNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest");
         }
 
-        forcedLegacyNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest/ForcedLegacyMode");
+        if (mstestNode == null)
+        {
+            return;
+        }
+
+        forcedLegacyNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest/ForcedLegacyMode")!;
         if (forcedLegacyNode == null)
         {
             forcedLegacyNode = newXmlDoc.CreateNode(XmlNodeType.Element, ForcedLegacyModeName, null);
             mstestNode.AppendChild(newXmlDoc.ImportNode(forcedLegacyNode, deep: true));
-            forcedLegacyNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest/ForcedLegacyMode");
+            forcedLegacyNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest/ForcedLegacyMode")!;
         }
 
         forcedLegacyNode.InnerText = "true";
 
         // Remove if the legacy node already exists.
         var legacyNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/LegacySettings");
-        if (legacyNode != null)
+        if (legacyNode?.ParentNode != null)
         {
             Console.WriteLine(CommandLineResources.IgnoringLegacySettings);
             legacyNode.ParentNode.RemoveChild(legacyNode);
@@ -310,28 +319,28 @@ private static void AddLegacyNodes(TestSettingsNodes testSettingsNodes, string?
         // Execution node.
         if (testSettingsNodes.UnitTestConfig != null || !parallelTestCount.IsNullOrEmpty() || !testTimeout.IsNullOrEmpty() || testSettingsNodes.Hosts != null)
         {
-            var newExecutionNode = newXmlDoc.CreateNode(XmlNodeType.Element, ExecutionNodeName, null);
+            XmlNode newExecutionNode = newXmlDoc.CreateNode(XmlNodeType.Element, ExecutionNodeName, null)!;
 
             if (!parallelTestCount.IsNullOrEmpty())
             {
                 var paralellAttribute = newXmlDoc.CreateAttribute(ParallelTestCountAttributeName);
                 paralellAttribute.Value = parallelTestCount;
-                newExecutionNode.Attributes.Append(paralellAttribute);
+                newExecutionNode.Attributes?.Append(paralellAttribute);
             }
 
             if (!hostProcessPlatform.IsNullOrEmpty())
             {
                 var hostProcessPlatformAttribute = newXmlDoc.CreateAttribute(HostProcessPlatformAttributeName);
                 hostProcessPlatformAttribute.Value = hostProcessPlatform;
-                newExecutionNode.Attributes.Append(hostProcessPlatformAttribute);
+                newExecutionNode.Attributes?.Append(hostProcessPlatformAttribute);
             }
 
             if (!testTimeout.IsNullOrEmpty())
             {
-                var newTimeoutsNode = newXmlDoc.CreateNode(XmlNodeType.Element, TimeoutsNodeName, null);
+                var newTimeoutsNode = newXmlDoc.CreateNode(XmlNodeType.Element, TimeoutsNodeName, null)!;
                 var testtimeoutattribute = newXmlDoc.CreateAttribute(TestTimeoutAttributeName);
                 testtimeoutattribute.Value = testTimeout;
-                newTimeoutsNode.Attributes.Append(testtimeoutattribute);
+                newTimeoutsNode.Attributes?.Append(testtimeoutattribute);
                 newExecutionNode.AppendChild(newXmlDoc.ImportNode(newTimeoutsNode, deep: true));
             }
 
@@ -358,8 +367,13 @@ private static void AddLegacyNodes(TestSettingsNodes testSettingsNodes, string?
     /// </summary>
     /// <param name="oldDatacollectorNodes"> Datacollector Nodes</param>
     /// <param name="newXmlDoc">Xml doc to process</param>
-    private static void AddDataCollectorNodes(XmlNodeList oldDatacollectorNodes, XmlDocument newXmlDoc)
+    private static void AddDataCollectorNodes(XmlNodeList oldDatacollectorNodes, XmlDocument? newXmlDoc)
     {
+        if (newXmlDoc?.DocumentElement == null)
+        {
+            return;
+        }
+
         var dataCollectionRunSettingsNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/DataCollectionRunSettings");
         dataCollectionRunSettingsNode ??= newXmlDoc.CreateNode(XmlNodeType.Element, DataCollectionRunSettingsNodeName, null);
 
@@ -369,7 +383,7 @@ private static void AddDataCollectorNodes(XmlNodeList oldDatacollectorNodes, Xml
             dataCollectorsNode = newXmlDoc.CreateNode(XmlNodeType.Element, DataCollectorsNodeName, null);
             dataCollectionRunSettingsNode.AppendChild(newXmlDoc.ImportNode(dataCollectorsNode, deep: true));
             newXmlDoc.DocumentElement.AppendChild(dataCollectionRunSettingsNode);
-            dataCollectorsNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/DataCollectionRunSettings/DataCollectors");
+            dataCollectorsNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/DataCollectionRunSettings/DataCollectors")!;
         }
 
         foreach (XmlNode datacollector in oldDatacollectorNodes)
@@ -385,6 +399,11 @@ private static void AddDataCollectorNodes(XmlNodeList oldDatacollectorNodes, Xml
     /// <param name="newXmlDoc">Xml doc to process</param>
     private static void AddRunTimeoutNode(string runTimeout, XmlDocument newXmlDoc)
     {
+        if (newXmlDoc?.DocumentElement == null)
+        {
+            return;
+        }
+
         var runConfigurationNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/RunConfiguration");
         runConfigurationNode ??= newXmlDoc.CreateNode(XmlNodeType.Element, RunConfigurationNodeName, null);
 
diff --git a/src/SettingsMigrator/PathResolver.cs b/src/SettingsMigrator/PathResolver.cs
index 8a4fb15d59..cb197a3241 100644
--- a/src/SettingsMigrator/PathResolver.cs
+++ b/src/SettingsMigrator/PathResolver.cs
@@ -33,7 +33,7 @@ public class PathResolver
         {
             var oldFilePath = args[0];
             var newFileName = string.Concat(Path.GetFileNameWithoutExtension(oldFilePath), "_", DateTime.Now.ToString("MM-dd-yyyy_hh-mm-ss", CultureInfo.CurrentCulture), RunSettingsExtension);
-            newFilePath = Path.Combine(Path.GetDirectoryName(oldFilePath), newFileName);
+            newFilePath = Path.Combine(Path.GetDirectoryName(oldFilePath)!, newFileName);
         }
         else if (args.Length == 2)
         {
diff --git a/src/vstest.console/vstest.console.csproj b/src/vstest.console/vstest.console.csproj
index 539eb3bf08..5a186f01ab 100644
--- a/src/vstest.console/vstest.console.csproj
+++ b/src/vstest.console/vstest.console.csproj
@@ -22,6 +22,10 @@
       (e.g. System.Runtime 4.1.2 instead of 4.0.0)
     -->
     <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
+
+    <MSBuildWarningsAsMessages>
+      $(MSBuildWarningsAsMessages);MSB3276;
+    </MSBuildWarningsAsMessages>
   </PropertyGroup>
   <PropertyGroup Condition="'$(TargetFramework)' == '$(TargetNetFxVersion)'">
     <RuntimeIdentifiers>win7-x64;win10-arm64</RuntimeIdentifiers>

From 5c5bc9c4965f58b2fe3117b78d0268597a02851f Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Sun, 21 Aug 2022 10:31:41 +0200
Subject: [PATCH 04/17] PR fixes.

---
 .editorconfig                                   |  4 ++--
 .../Microsoft.TestPlatform.CoreUtilities.csproj |  7 +++++--
 .../PublicAPI.Shipped.txt                       |  0
 .../PublicAPI.Unshipped.txt                     |  0
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      | 13 -------------
 ...oft.TestPlatform.PlatformAbstractions.csproj |  7 +++++--
 .../PublicAPI/net6.0/PublicAPI.Unshipped.txt    |  1 -
 .../PublicAPI.Shipped.txt                       |  0
 .../net6.0_and_net7.0}/PublicAPI.Unshipped.txt  |  0
 .../PublicAPI/net7.0/PublicAPI.Shipped.txt      | 17 -----------------
 .../PublicAPI/net7.0/PublicAPI.Unshipped.txt    |  1 -
 11 files changed, 12 insertions(+), 38 deletions(-)
 rename src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/{net6.0 => net6.0_and_net7.0}/PublicAPI.Shipped.txt (100%)
 rename src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/{net6.0 => net6.0_and_net7.0}/PublicAPI.Unshipped.txt (100%)
 delete mode 100644 src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
 delete mode 100644 src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0/PublicAPI.Unshipped.txt
 rename src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/{net6.0 => net6.0_and_net7.0}/PublicAPI.Shipped.txt (100%)
 rename src/{Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0 => Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0_and_net7.0}/PublicAPI.Unshipped.txt (100%)
 delete mode 100644 src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Shipped.txt
 delete mode 100644 src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Unshipped.txt

diff --git a/.editorconfig b/.editorconfig
index 8cd964cd3f..b78e7a35b8 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -312,8 +312,8 @@ csharp_prefer_simple_default_expression = true:suggestion
 csharp_style_deconstructed_variable_declaration = true:suggestion
 csharp_style_inlined_variable_declaration = true:suggestion
 csharp_style_prefer_local_over_anonymous_function = false:suggestion # not default, default is true, avoided because we use anonymous functions in multiple places and it does not make the code clearer
-csharp_style_prefer_index_operator = false:suggestion # not default, default is true, disabled because Index operator is not supported in all the TFMs we support.
-csharp_style_prefer_range_operator = false:suggestion # not default, default is true, disabled because Range operator is not supported in all the TFMs we support.
+csharp_style_prefer_index_operator = false:warning # not default, default is true, disabled because Index operator is not supported in all the TFMs we support. (supported on .Net Core 3.0+)
+csharp_style_prefer_range_operator = false:warning # not default, default is true, disabled because Range operator is not supported in all the TFMs we support. (supported on .Net Core 3.0+)
 csharp_style_throw_expression = true:suggestion
 csharp_style_unused_value_assignment_preference = discard_variable:suggestion
 csharp_style_unused_value_expression_statement_preference = discard_variable:silent
diff --git a/src/Microsoft.TestPlatform.CoreUtilities/Microsoft.TestPlatform.CoreUtilities.csproj b/src/Microsoft.TestPlatform.CoreUtilities/Microsoft.TestPlatform.CoreUtilities.csproj
index bf8cea140e..366bcef095 100644
--- a/src/Microsoft.TestPlatform.CoreUtilities/Microsoft.TestPlatform.CoreUtilities.csproj
+++ b/src/Microsoft.TestPlatform.CoreUtilities/Microsoft.TestPlatform.CoreUtilities.csproj
@@ -78,8 +78,11 @@
     <AdditionalFiles Condition=" '$(TargetFramework)' != 'netstandard1.0' " Include="PublicAPI\net\PublicAPI.Shipped.txt" />
     <AdditionalFiles Condition=" '$(TargetFramework)' != 'netstandard1.0' " Include="PublicAPI\net\PublicAPI.Unshipped.txt" />
     <!-- Framework specific API -->
-    <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt" />
-    <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt" />
+    <AdditionalFiles Condition=" '$(TargetFramework)' != 'net6.0' and '$(TargetFramework)' != 'net7.0' " Include="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt" />
+    <AdditionalFiles Condition=" '$(TargetFramework)' != 'net6.0' and '$(TargetFramework)' != 'net7.0' " Include="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt" />
+    <!-- Framework specific API for Net6.0 and Net7.0 -->
+    <AdditionalFiles Condition=" '$(TargetFramework)' == 'net6.0' or '$(TargetFramework)' == 'net7.0' " Include="PublicAPI/net6.0_and_net7.0/PublicAPI.Shipped.txt" />
+    <AdditionalFiles Condition=" '$(TargetFramework)' == 'net6.0' or '$(TargetFramework)' == 'net7.0' " Include="PublicAPI/net6.0_and_net7.0/PublicAPI.Unshipped.txt" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net6.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net6.0_and_net7.0/PublicAPI.Shipped.txt
similarity index 100%
rename from src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net6.0/PublicAPI.Shipped.txt
rename to src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net6.0_and_net7.0/PublicAPI.Shipped.txt
diff --git a/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net6.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net6.0_and_net7.0/PublicAPI.Unshipped.txt
similarity index 100%
rename from src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net6.0/PublicAPI.Unshipped.txt
rename to src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net6.0_and_net7.0/PublicAPI.Unshipped.txt
diff --git a/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
deleted file mode 100644
index dc4f1b293a..0000000000
--- a/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Shipped.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-﻿#nullable enable
-Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput
-Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.Write(string? message, Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel level) -> void
-Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.WriteLine(string? message, Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel level) -> void
-Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions
-static Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.TraceLevel.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel
-static Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.TraceLevel.set -> void
-static Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.Instance.get -> Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput!
-static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Error(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, bool appendPrefix, string! format, params object?[]? args) -> void
-static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Information(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, bool appendPrefix, string! format, params object?[]? args) -> void
-static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Information(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, bool appendPrefix, System.ConsoleColor foregroundColor, string! format, params object?[]? args) -> void
-static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Warning(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, bool appendPrefix, string! format, params object?[]? args) -> void
-static Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions.Write(this Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, string! message, Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel level, System.ConsoleColor foregroundColor) -> void
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/Microsoft.TestPlatform.PlatformAbstractions.csproj b/src/Microsoft.TestPlatform.PlatformAbstractions/Microsoft.TestPlatform.PlatformAbstractions.csproj
index 5c4257aeb5..349cc07dfd 100644
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/Microsoft.TestPlatform.PlatformAbstractions.csproj
+++ b/src/Microsoft.TestPlatform.PlatformAbstractions/Microsoft.TestPlatform.PlatformAbstractions.csproj
@@ -64,8 +64,11 @@
     <AdditionalFiles Condition=" '$(TargetFramework)' != 'netstandard1.0' " Include="PublicAPI\net\PublicAPI.Shipped.txt" />
     <AdditionalFiles Condition=" '$(TargetFramework)' != 'netstandard1.0' " Include="PublicAPI\net\PublicAPI.Unshipped.txt" />
     <!-- Framework specific API -->
-    <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt" />
-    <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt" />
+    <AdditionalFiles Condition=" '$(TargetFramework)' != 'net6.0' and '$(TargetFramework)' != 'net7.0' " Include="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt" />
+    <AdditionalFiles Condition=" '$(TargetFramework)' != 'net6.0' and '$(TargetFramework)' != 'net7.0' " Include="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt" />
+    <!-- Framework specific API for Net6.0 and Net7.0 -->
+    <AdditionalFiles Condition=" '$(TargetFramework)' == 'net6.0' or '$(TargetFramework)' == 'net7.0' " Include="PublicAPI/net6.0_and_net7.0/PublicAPI.Shipped.txt" />
+    <AdditionalFiles Condition=" '$(TargetFramework)' == 'net6.0' or '$(TargetFramework)' == 'net7.0' " Include="PublicAPI/net6.0_and_net7.0/PublicAPI.Unshipped.txt" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0/PublicAPI.Unshipped.txt
deleted file mode 100644
index ab058de62d..0000000000
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0/PublicAPI.Unshipped.txt
+++ /dev/null
@@ -1 +0,0 @@
-﻿#nullable enable
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0_and_net7.0/PublicAPI.Shipped.txt
similarity index 100%
rename from src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0/PublicAPI.Shipped.txt
rename to src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0_and_net7.0/PublicAPI.Shipped.txt
diff --git a/src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0_and_net7.0/PublicAPI.Unshipped.txt
similarity index 100%
rename from src/Microsoft.TestPlatform.CoreUtilities/PublicAPI/net7.0/PublicAPI.Unshipped.txt
rename to src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net6.0_and_net7.0/PublicAPI.Unshipped.txt
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Shipped.txt b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Shipped.txt
deleted file mode 100644
index d17adb2a82..0000000000
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Shipped.txt
+++ /dev/null
@@ -1,17 +0,0 @@
-﻿#nullable enable
-Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.InitializeTrace(string? customLogFile, Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel platformTraceLevel) -> bool
-Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.MapPlatformTraceToTrace(Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel traceLevel) -> System.Diagnostics.TraceLevel
-Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.WriteLine(Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel level, string? message) -> void
-Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener
-Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.RollingFileTraceListener(string! fileName, string! name, int rollSizeKB) -> void
-Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformAssemblyResolver.~PlatformAssemblyResolver() -> void
-Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformThread.Run(System.Action? action, Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformApartmentState apartmentState, bool waitForCompletion) -> void
-Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.LaunchProcess(string! processPath, string? arguments, string? workingDirectory, System.Collections.Generic.IDictionary<string!, string?>? envVariables, System.Action<object?, string?>? errorCallback, System.Action<object?>? exitCallBack, System.Action<object?, string?>? outputCallBack) -> object!
-Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper.SetExitCallback(int processId, System.Action<object?>? callbackAction) -> void
-Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessStartInfoExtensions
-override Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.Dispose(bool disposing) -> void
-override Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.WriteLine(string? message) -> void
-static Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.LogFile.get -> string?
-static Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.TraceLevel.get -> System.Diagnostics.TraceLevel
-static Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace.TraceLevel.set -> void
-static Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessStartInfoExtensions.AddEnvironmentVariable(this System.Diagnostics.ProcessStartInfo! startInfo, string! name, string? value) -> void
diff --git a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Unshipped.txt b/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Unshipped.txt
deleted file mode 100644
index ab058de62d..0000000000
--- a/src/Microsoft.TestPlatform.PlatformAbstractions/PublicAPI/net7.0/PublicAPI.Unshipped.txt
+++ /dev/null
@@ -1 +0,0 @@
-﻿#nullable enable

From 627309338b3588f5555bd8d15703be45765c647f Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:45:14 +0300
Subject: [PATCH 05/17] Update
 src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionAttachmentManager.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 .../DataCollection/DataCollectionAttachmentManager.cs       | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionAttachmentManager.cs b/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionAttachmentManager.cs
index c79122b0dd..242600db5a 100644
--- a/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionAttachmentManager.cs
+++ b/src/Microsoft.TestPlatform.Common/DataCollection/DataCollectionAttachmentManager.cs
@@ -290,11 +290,11 @@ private void AddNewFileTransfer(FileTransferInformation fileTransferInfo, AsyncC
                         ex.ToString(),
                         uri,
                         friendlyName,
+                        Guid.Parse(testCaseId
 #if NET7_0_OR_GREATER
-                        Guid.Parse(testCaseId, CultureInfo.InvariantCulture)
-#else
-                        Guid.Parse(testCaseId)
+                            , CultureInfo.InvariantCulture
 #endif
+                            )
                         );
 
                     throw;

From 8efeaca3ad4a415776bb70c9874a582e547bab95 Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:48:46 +0300
Subject: [PATCH 06/17] Update src/SettingsMigrator/Migrator.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 src/SettingsMigrator/Migrator.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index c5f08938ad..9079787c25 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -155,7 +155,7 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         TestSettingsNodes testSettingsNodes = ReadTestSettingsNodes(testSettingsPath);
 
         string? testTimeout = null;
-        if (testSettingsNodes?.Timeout?.Attributes?[TestTimeoutAttributeName] != null)
+        if (testSettingsNodes.Timeout?.Attributes?[TestTimeoutAttributeName] != null)
         {
             testTimeout = testSettingsNodes?.Timeout?.Attributes?[TestTimeoutAttributeName]?.Value;
         }

From 12d36e33ecadf1b6ee9fc5564d47fddf370c1231 Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:48:54 +0300
Subject: [PATCH 07/17] Update src/SettingsMigrator/Migrator.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 src/SettingsMigrator/Migrator.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index 9079787c25..db08ba0774 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -161,7 +161,7 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         }
 
         string? runTimeout = null;
-        if (testSettingsNodes?.Timeout?.Attributes?[RunTimeoutAttributeName] != null)
+        if (testSettingsNodes.Timeout?.Attributes?[RunTimeoutAttributeName] != null)
         {
             runTimeout = testSettingsNodes?.Timeout?.Attributes?[RunTimeoutAttributeName]?.Value;
         }

From 39a1176b2339838ca0d9dc07c7207387a41ff648 Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:49:02 +0300
Subject: [PATCH 08/17] Update src/SettingsMigrator/Migrator.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 src/SettingsMigrator/Migrator.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index db08ba0774..1792bd0091 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -167,7 +167,7 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         }
 
         string? parallelTestCount = null;
-        if (testSettingsNodes?.Execution?.Attributes?[ParallelTestCountAttributeName] != null)
+        if (testSettingsNodes.Execution?.Attributes?[ParallelTestCountAttributeName] != null)
         {
             parallelTestCount = testSettingsNodes?.Execution?.Attributes?[ParallelTestCountAttributeName]?.Value;
         }

From c74b5c0f9825b37a49afbb437c774ab0ee9267fb Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:49:14 +0300
Subject: [PATCH 09/17] Update src/SettingsMigrator/Migrator.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 src/SettingsMigrator/Migrator.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index 1792bd0091..be19b663a3 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -173,7 +173,7 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         }
 
         string? hostProcessPlatform = null;
-        if (testSettingsNodes?.Execution?.Attributes?[HostProcessPlatformAttributeName] != null)
+        if (testSettingsNodes.Execution?.Attributes?[HostProcessPlatformAttributeName] != null)
         {
             hostProcessPlatform = testSettingsNodes?.Execution?.Attributes?[HostProcessPlatformAttributeName]?.Value;
         }

From 3949e1ec6961ca5f618c5ce20f961d2b63204e83 Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:49:23 +0300
Subject: [PATCH 10/17] Update src/SettingsMigrator/Migrator.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 src/SettingsMigrator/Migrator.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index be19b663a3..58e6ab1501 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -179,7 +179,7 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         }
 
         // WebTestRunConfiguration node.
-        if (testSettingsNodes?.WebSettings != null)
+        if (testSettingsNodes.WebSettings != null)
         {
             runSettingsXmlDoc?.DocumentElement?.AppendChild(runSettingsXmlDoc.ImportNode(testSettingsNodes.WebSettings, deep: true));
         }

From 4e612209927af8fdfaf4017d61a9636c1790663e Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:49:30 +0300
Subject: [PATCH 11/17] Update src/SettingsMigrator/Migrator.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 src/SettingsMigrator/Migrator.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index 58e6ab1501..cb6647ab03 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -185,7 +185,7 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         }
 
         // LegacySettings node.
-        AddLegacyNodes(testSettingsNodes!, testTimeout, parallelTestCount, hostProcessPlatform, runSettingsXmlDoc!);
+        AddLegacyNodes(testSettingsNodes, testTimeout, parallelTestCount, hostProcessPlatform, runSettingsXmlDoc!);
 
         // TestSessionTimeout node.
         if (!runTimeout.IsNullOrEmpty())

From d684d838e4826d3f090e943f6562bc138c4e94b5 Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:49:40 +0300
Subject: [PATCH 12/17] Update src/SettingsMigrator/Migrator.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 src/SettingsMigrator/Migrator.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index cb6647ab03..c31b398a7e 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -194,7 +194,7 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         }
 
         // DataCollectors node.
-        if (testSettingsNodes?.Datacollectors != null && testSettingsNodes.Datacollectors.Count > 0)
+        if (testSettingsNodes.Datacollectors != null && testSettingsNodes.Datacollectors.Count > 0)
         {
             AddDataCollectorNodes(testSettingsNodes.Datacollectors, runSettingsXmlDoc!);
         }

From 206b0e993c9baa9645beab7c9cdf79a297d3bf2d Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:50:07 +0300
Subject: [PATCH 13/17] Update src/SettingsMigrator/Migrator.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 src/SettingsMigrator/Migrator.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index c31b398a7e..c438bd3316 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -190,7 +190,7 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         // TestSessionTimeout node.
         if (!runTimeout.IsNullOrEmpty())
         {
-            AddRunTimeoutNode(runTimeout, runSettingsXmlDoc!);
+            AddRunTimeoutNode(runTimeout, runSettingsXmlDoc);
         }
 
         // DataCollectors node.

From fd61868259086a003c516460e42f0989dbcb8502 Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 12:50:27 +0300
Subject: [PATCH 14/17] Update src/SettingsMigrator/Migrator.cs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Co-authored-by: Amaury Levé <amauryleve@microsoft.com>
---
 src/SettingsMigrator/Migrator.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index c438bd3316..a343b8a0e8 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -229,7 +229,7 @@ private static TestSettingsNodes ReadTestSettingsNodes(string testSettingsPath)
             }
         }
 
-        return testSettingsNodes!;
+        return testSettingsNodes;
     }
 
     /// <summary>

From d3c8cf01092ca1fbe1702d6a61557405ab7f1d84 Mon Sep 17 00:00:00 2001
From: Medeni Baykal <433724+Haplois@users.noreply.github.com>
Date: Mon, 22 Aug 2022 13:10:30 +0200
Subject: [PATCH 15/17] PR fixes.

---
 .../EventLogDataCollector.cs                   |  2 +-
 .../TestCase.cs                                | 18 ++++++++++++++----
 .../ClientUtilities.cs                         |  4 +---
 .../InferRunSettingsHelper.cs                  |  2 +-
 .../XmlUtilities.cs                            | 10 +++++++++-
 src/SettingsMigrator/Migrator.cs               | 16 ++++++++--------
 .../CommandLine/AssemblyMetadataProvider.cs    |  2 ++
 7 files changed, 36 insertions(+), 18 deletions(-)

diff --git a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs
index b84d29cddb..bacd5e18e0 100644
--- a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs
+++ b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs
@@ -576,7 +576,7 @@ private EventLogSessionContext GetEventLogSessionContext(DataCollectionContext d
             eventLogContainerFound = ContextMap.TryGetValue(dataCollectionContext, out eventLogSessionContext);
         }
 
-        if (eventLogContainerFound == false)
+        if (!eventLogContainerFound)
         {
             string msg = string.Format(
                 CultureInfo.CurrentCulture,
diff --git a/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs b/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs
index 34db9c3320..0e120717ef 100644
--- a/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs
+++ b/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs
@@ -262,13 +262,23 @@ protected override void ProtectedSetPropertyValue(TestProperty property, object?
                 return;
 
             case "TestCase.Id":
-                Id = value is Guid guid
-                    ? guid
+                if (value is Guid guid)
+                {
+                    Id = guid;
+                }
+                else if (value is string guidString)
+                {
 #if NET7_0_OR_GREATER
-                    : Guid.Parse((value as string)!, CultureInfo.InvariantCulture);
+                    Id = Guid.Parse(guidString, CultureInfo.InvariantCulture);
 #else
-                    : Guid.Parse((value as string)!);
+                    Id = Guid.Parse(guidString);
 #endif
+                }
+                else
+                {
+                    Id = Guid.Empty;
+                }
+
                 return;
 
             case "TestCase.LineNumber":
diff --git a/src/Microsoft.TestPlatform.Utilities/ClientUtilities.cs b/src/Microsoft.TestPlatform.Utilities/ClientUtilities.cs
index 9848ca74d8..0bbef70c71 100644
--- a/src/Microsoft.TestPlatform.Utilities/ClientUtilities.cs
+++ b/src/Microsoft.TestPlatform.Utilities/ClientUtilities.cs
@@ -54,11 +54,9 @@ public static void FixRelativePathsInRunSettings(XmlDocument xmlDocument, string
 
     private static void AddRunSettingsDirectoryNode(XmlDocument doc, string path)
     {
-        ValidateArg.NotNull(doc.DocumentElement, nameof(doc.DocumentElement));
-
         var node = doc.CreateNode(XmlNodeType.Element, RunsettingsDirectory, string.Empty);
         node.InnerXml = path;
-        doc.DocumentElement.AppendChild(node);
+        doc.DocumentElement!.AppendChild(node);
     }
 
     private static void FixNodeFilePath(XmlNode node, string root)
diff --git a/src/Microsoft.TestPlatform.Utilities/InferRunSettingsHelper.cs b/src/Microsoft.TestPlatform.Utilities/InferRunSettingsHelper.cs
index 85e522aabc..e5a8494330 100644
--- a/src/Microsoft.TestPlatform.Utilities/InferRunSettingsHelper.cs
+++ b/src/Microsoft.TestPlatform.Utilities/InferRunSettingsHelper.cs
@@ -706,7 +706,7 @@ public static IEnumerable<string> FilterCompatibleSources(Architecture chosenPla
     private static bool IsPlatformIncompatible(Architecture sourcePlatform, Architecture targetPlatform)
     {
         return sourcePlatform is not Architecture.Default and not Architecture.AnyCPU
-&& (targetPlatform == Architecture.X64 && !Is64BitOperatingSystem() || sourcePlatform != targetPlatform);
+            && (targetPlatform == Architecture.X64 && !Is64BitOperatingSystem() || sourcePlatform != targetPlatform);
 
         static bool Is64BitOperatingSystem()
         {
diff --git a/src/Microsoft.TestPlatform.Utilities/XmlUtilities.cs b/src/Microsoft.TestPlatform.Utilities/XmlUtilities.cs
index 3d891e82d4..b9bf379981 100644
--- a/src/Microsoft.TestPlatform.Utilities/XmlUtilities.cs
+++ b/src/Microsoft.TestPlatform.Utilities/XmlUtilities.cs
@@ -63,7 +63,15 @@ internal static bool IsValidNodeXmlValue(string xmlNodeValue, Func<string, bool>
         var secureInnerXml = SecurityElement.Escape(innerXml);
 #else
         // fixing manually as we currently target to netcore 1.1 and we don't have default implementation for Escape functionality
-        var secureInnerXml = (innerXml ?? string.Empty).Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;").Replace("\"", "&quot;").Replace("'", "&apos;");
+        string secureInnerXml;
+        if (innerXml.IsNullOrEmpty())
+        {
+            secureInnerXml = string.Empty;
+        }
+        else
+        {
+            secureInnerXml = innerXml.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;").Replace("\"", "&quot;").Replace("'", "&apos;");
+        }
 #endif
         if (childNode == null)
         {
diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index a343b8a0e8..9079787c25 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -161,40 +161,40 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         }
 
         string? runTimeout = null;
-        if (testSettingsNodes.Timeout?.Attributes?[RunTimeoutAttributeName] != null)
+        if (testSettingsNodes?.Timeout?.Attributes?[RunTimeoutAttributeName] != null)
         {
             runTimeout = testSettingsNodes?.Timeout?.Attributes?[RunTimeoutAttributeName]?.Value;
         }
 
         string? parallelTestCount = null;
-        if (testSettingsNodes.Execution?.Attributes?[ParallelTestCountAttributeName] != null)
+        if (testSettingsNodes?.Execution?.Attributes?[ParallelTestCountAttributeName] != null)
         {
             parallelTestCount = testSettingsNodes?.Execution?.Attributes?[ParallelTestCountAttributeName]?.Value;
         }
 
         string? hostProcessPlatform = null;
-        if (testSettingsNodes.Execution?.Attributes?[HostProcessPlatformAttributeName] != null)
+        if (testSettingsNodes?.Execution?.Attributes?[HostProcessPlatformAttributeName] != null)
         {
             hostProcessPlatform = testSettingsNodes?.Execution?.Attributes?[HostProcessPlatformAttributeName]?.Value;
         }
 
         // WebTestRunConfiguration node.
-        if (testSettingsNodes.WebSettings != null)
+        if (testSettingsNodes?.WebSettings != null)
         {
             runSettingsXmlDoc?.DocumentElement?.AppendChild(runSettingsXmlDoc.ImportNode(testSettingsNodes.WebSettings, deep: true));
         }
 
         // LegacySettings node.
-        AddLegacyNodes(testSettingsNodes, testTimeout, parallelTestCount, hostProcessPlatform, runSettingsXmlDoc!);
+        AddLegacyNodes(testSettingsNodes!, testTimeout, parallelTestCount, hostProcessPlatform, runSettingsXmlDoc!);
 
         // TestSessionTimeout node.
         if (!runTimeout.IsNullOrEmpty())
         {
-            AddRunTimeoutNode(runTimeout, runSettingsXmlDoc);
+            AddRunTimeoutNode(runTimeout, runSettingsXmlDoc!);
         }
 
         // DataCollectors node.
-        if (testSettingsNodes.Datacollectors != null && testSettingsNodes.Datacollectors.Count > 0)
+        if (testSettingsNodes?.Datacollectors != null && testSettingsNodes.Datacollectors.Count > 0)
         {
             AddDataCollectorNodes(testSettingsNodes.Datacollectors, runSettingsXmlDoc!);
         }
@@ -229,7 +229,7 @@ private static TestSettingsNodes ReadTestSettingsNodes(string testSettingsPath)
             }
         }
 
-        return testSettingsNodes;
+        return testSettingsNodes!;
     }
 
     /// <summary>
diff --git a/src/vstest.console/CommandLine/AssemblyMetadataProvider.cs b/src/vstest.console/CommandLine/AssemblyMetadataProvider.cs
index a30916f0d3..8a1e47df5f 100644
--- a/src/vstest.console/CommandLine/AssemblyMetadataProvider.cs
+++ b/src/vstest.console/CommandLine/AssemblyMetadataProvider.cs
@@ -61,6 +61,8 @@ public Architecture GetArchitecture(string assemblyPath)
 
             var processorArchitecture =
 #if NET7_0_OR_GREATER
+                // AssemblyName doesn't include ProcessorArchitecture in net7.
+                // It will always be ProcessorArchitecture.None.
                 ProcessorArchitecture.None;
 #else
                 assemblyName.ProcessorArchitecture;

From 1da40f3bd324e3edadbdba0535f0edc92b65cb75 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Amaury=20Lev=C3=A9?= <amauryleve@microsoft.com>
Date: Mon, 22 Aug 2022 13:12:10 +0200
Subject: [PATCH 16/17] Improve code

- Rework nullability
- Fix typos
- Remove unused directives
- Add pragma for directive used only under certain conditions
---
 .../Interfaces/INativeMethodsHelper.cs        |  2 -
 .../TestCase.cs                               |  2 +
 src/SettingsMigrator/Migrator.cs              | 85 ++++++++++---------
 3 files changed, 48 insertions(+), 41 deletions(-)

diff --git a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Interfaces/INativeMethodsHelper.cs b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Interfaces/INativeMethodsHelper.cs
index da7306168c..ad739c9eeb 100644
--- a/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Interfaces/INativeMethodsHelper.cs
+++ b/src/Microsoft.TestPlatform.Extensions.BlameDataCollector/Interfaces/INativeMethodsHelper.cs
@@ -1,8 +1,6 @@
 ﻿// Copyright (c) Microsoft Corporation. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
-
 namespace Microsoft.TestPlatform.Extensions.BlameDataCollector;
 
 public interface INativeMethodsHelper
diff --git a/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs b/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs
index 0e120717ef..fef61efea6 100644
--- a/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs
+++ b/src/Microsoft.TestPlatform.ObjectModel/TestCase.cs
@@ -3,7 +3,9 @@
 
 using System;
 using System.Collections.Generic;
+#if NET7_0_OR_GREATER
 using System.Globalization;
+#endif
 using System.IO;
 using System.Linq;
 using System.Runtime.Serialization;
diff --git a/src/SettingsMigrator/Migrator.cs b/src/SettingsMigrator/Migrator.cs
index 9079787c25..e2edb5c224 100644
--- a/src/SettingsMigrator/Migrator.cs
+++ b/src/SettingsMigrator/Migrator.cs
@@ -155,37 +155,43 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         TestSettingsNodes testSettingsNodes = ReadTestSettingsNodes(testSettingsPath);
 
         string? testTimeout = null;
-        if (testSettingsNodes.Timeout?.Attributes?[TestTimeoutAttributeName] != null)
-        {
-            testTimeout = testSettingsNodes?.Timeout?.Attributes?[TestTimeoutAttributeName]?.Value;
-        }
-
         string? runTimeout = null;
-        if (testSettingsNodes?.Timeout?.Attributes?[RunTimeoutAttributeName] != null)
+        if (testSettingsNodes.Timeout is not null)
         {
-            runTimeout = testSettingsNodes?.Timeout?.Attributes?[RunTimeoutAttributeName]?.Value;
-        }
+            if (testSettingsNodes.Timeout.Attributes?[TestTimeoutAttributeName] is XmlAttribute testTimeoutAttribute)
+            {
+                testTimeout = testTimeoutAttribute.Value;
+            }
 
-        string? parallelTestCount = null;
-        if (testSettingsNodes?.Execution?.Attributes?[ParallelTestCountAttributeName] != null)
-        {
-            parallelTestCount = testSettingsNodes?.Execution?.Attributes?[ParallelTestCountAttributeName]?.Value;
+            if (testSettingsNodes.Timeout.Attributes?[RunTimeoutAttributeName] is XmlAttribute runTimeoutAttribute)
+            {
+                runTimeout = runTimeoutAttribute.Value;
+            }
         }
 
+        string? parallelTestCount = null;
         string? hostProcessPlatform = null;
-        if (testSettingsNodes?.Execution?.Attributes?[HostProcessPlatformAttributeName] != null)
+        if (testSettingsNodes.Execution is not null)
         {
-            hostProcessPlatform = testSettingsNodes?.Execution?.Attributes?[HostProcessPlatformAttributeName]?.Value;
+            if (testSettingsNodes.Execution.Attributes?[ParallelTestCountAttributeName] is XmlAttribute parallelTestCountAttribute)
+            {
+                parallelTestCount = parallelTestCountAttribute.Value;
+            }
+
+            if (testSettingsNodes.Execution.Attributes?[HostProcessPlatformAttributeName] is XmlAttribute hostProcessPlatformAttribute)
+            {
+                hostProcessPlatform = hostProcessPlatformAttribute.Value;
+            }
         }
 
         // WebTestRunConfiguration node.
-        if (testSettingsNodes?.WebSettings != null)
+        if (testSettingsNodes.WebSettings != null)
         {
-            runSettingsXmlDoc?.DocumentElement?.AppendChild(runSettingsXmlDoc.ImportNode(testSettingsNodes.WebSettings, deep: true));
+            runSettingsXmlDoc.DocumentElement?.AppendChild(runSettingsXmlDoc.ImportNode(testSettingsNodes.WebSettings, deep: true));
         }
 
         // LegacySettings node.
-        AddLegacyNodes(testSettingsNodes!, testTimeout, parallelTestCount, hostProcessPlatform, runSettingsXmlDoc!);
+        AddLegacyNodes(testSettingsNodes, testTimeout, parallelTestCount, hostProcessPlatform, runSettingsXmlDoc);
 
         // TestSessionTimeout node.
         if (!runTimeout.IsNullOrEmpty())
@@ -196,7 +202,7 @@ private static void MigrateTestSettingsNodesToRunSettings(string testSettingsPat
         // DataCollectors node.
         if (testSettingsNodes?.Datacollectors != null && testSettingsNodes.Datacollectors.Count > 0)
         {
-            AddDataCollectorNodes(testSettingsNodes.Datacollectors, runSettingsXmlDoc!);
+            AddDataCollectorNodes(testSettingsNodes.Datacollectors, runSettingsXmlDoc);
         }
     }
 
@@ -222,8 +228,10 @@ private static TestSettingsNodes ReadTestSettingsNodes(string testSettingsPath)
             testSettingsNodes.Hosts = testSettingsRoot.SelectSingleNode(@"/TestSettings/Execution/Hosts");
             testSettingsNodes.Execution = testSettingsRoot.SelectSingleNode(@"/TestSettings/Execution");
 
-            if (testSettingsNodes.Timeout != null && (testSettingsNodes?.Timeout?.Attributes?[AgentNotRespondingTimeoutAttribute] != null ||
-                                                      testSettingsNodes?.Timeout?.Attributes?[DeploymentTimeoutAttribute] != null || testSettingsNodes?.Timeout?.Attributes?[ScriptTimeoutAttribute] != null))
+            if (testSettingsNodes.Timeout != null
+                && (testSettingsNodes.Timeout.Attributes?[AgentNotRespondingTimeoutAttribute] != null
+                    || testSettingsNodes.Timeout.Attributes?[DeploymentTimeoutAttribute] != null
+                    || testSettingsNodes.Timeout.Attributes?[ScriptTimeoutAttribute] != null))
             {
                 Console.WriteLine(CommandLineResources.UnsupportedAttributes);
             }
@@ -238,10 +246,10 @@ private static TestSettingsNodes ReadTestSettingsNodes(string testSettingsPath)
     /// <param name="newXmlDoc">Xml doc to process</param>
     private static void RemoveEmbeddedTestSettings(XmlDocument newXmlDoc)
     {
-        var testSettingsNode = newXmlDoc?.DocumentElement?.SelectSingleNode(@"/RunSettings/MSTest/SettingsFile");
+        var testSettingsNode = newXmlDoc.DocumentElement?.SelectSingleNode(@"/RunSettings/MSTest/SettingsFile");
         if (testSettingsNode != null)
         {
-            testSettingsNode?.ParentNode?.RemoveChild(testSettingsNode);
+            testSettingsNode.ParentNode?.RemoveChild(testSettingsNode);
         }
     }
 
@@ -266,14 +274,13 @@ private static void AddLegacyNodes(TestSettingsNodes testSettingsNodes, string?
             return;
         }
 
-        if (newXmlDoc?.DocumentElement == null)
+        if (newXmlDoc.DocumentElement == null)
         {
             return;
         }
 
         // Add ForcedLegacy node.
         var mstestNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest");
-        XmlNode forcedLegacyNode;
         if (mstestNode == null)
         {
             mstestNode = newXmlDoc.CreateNode(XmlNodeType.Element, MSTestNodeName, null);
@@ -286,7 +293,7 @@ private static void AddLegacyNodes(TestSettingsNodes testSettingsNodes, string?
             return;
         }
 
-        forcedLegacyNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest/ForcedLegacyMode")!;
+        var forcedLegacyNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/MSTest/ForcedLegacyMode");
         if (forcedLegacyNode == null)
         {
             forcedLegacyNode = newXmlDoc.CreateNode(XmlNodeType.Element, ForcedLegacyModeName, null);
@@ -319,13 +326,13 @@ private static void AddLegacyNodes(TestSettingsNodes testSettingsNodes, string?
         // Execution node.
         if (testSettingsNodes.UnitTestConfig != null || !parallelTestCount.IsNullOrEmpty() || !testTimeout.IsNullOrEmpty() || testSettingsNodes.Hosts != null)
         {
-            XmlNode newExecutionNode = newXmlDoc.CreateNode(XmlNodeType.Element, ExecutionNodeName, null)!;
+            XmlNode newExecutionNode = newXmlDoc.CreateNode(XmlNodeType.Element, ExecutionNodeName, null);
 
             if (!parallelTestCount.IsNullOrEmpty())
             {
-                var paralellAttribute = newXmlDoc.CreateAttribute(ParallelTestCountAttributeName);
-                paralellAttribute.Value = parallelTestCount;
-                newExecutionNode.Attributes?.Append(paralellAttribute);
+                var parallelAttribute = newXmlDoc.CreateAttribute(ParallelTestCountAttributeName);
+                parallelAttribute.Value = parallelTestCount;
+                newExecutionNode.Attributes?.Append(parallelAttribute);
             }
 
             if (!hostProcessPlatform.IsNullOrEmpty())
@@ -337,10 +344,10 @@ private static void AddLegacyNodes(TestSettingsNodes testSettingsNodes, string?
 
             if (!testTimeout.IsNullOrEmpty())
             {
-                var newTimeoutsNode = newXmlDoc.CreateNode(XmlNodeType.Element, TimeoutsNodeName, null)!;
-                var testtimeoutattribute = newXmlDoc.CreateAttribute(TestTimeoutAttributeName);
-                testtimeoutattribute.Value = testTimeout;
-                newTimeoutsNode.Attributes?.Append(testtimeoutattribute);
+                var newTimeoutsNode = newXmlDoc.CreateNode(XmlNodeType.Element, TimeoutsNodeName, null);
+                var testTimeoutAttribute = newXmlDoc.CreateAttribute(TestTimeoutAttributeName);
+                testTimeoutAttribute.Value = testTimeout;
+                newTimeoutsNode.Attributes?.Append(testTimeoutAttribute);
                 newExecutionNode.AppendChild(newXmlDoc.ImportNode(newTimeoutsNode, deep: true));
             }
 
@@ -363,11 +370,11 @@ private static void AddLegacyNodes(TestSettingsNodes testSettingsNodes, string?
     }
 
     /// <summary>
-    /// Adds the datacollector nodes to the runSettings xml.
+    /// Adds the dataCollector nodes to the runSettings xml.
     /// </summary>
-    /// <param name="oldDatacollectorNodes"> Datacollector Nodes</param>
+    /// <param name="oldDataCollectorNodes"> Datacollector Nodes</param>
     /// <param name="newXmlDoc">Xml doc to process</param>
-    private static void AddDataCollectorNodes(XmlNodeList oldDatacollectorNodes, XmlDocument? newXmlDoc)
+    private static void AddDataCollectorNodes(XmlNodeList oldDataCollectorNodes, XmlDocument? newXmlDoc)
     {
         if (newXmlDoc?.DocumentElement == null)
         {
@@ -386,9 +393,9 @@ private static void AddDataCollectorNodes(XmlNodeList oldDatacollectorNodes, Xml
             dataCollectorsNode = newXmlDoc.DocumentElement.SelectSingleNode(@"/RunSettings/DataCollectionRunSettings/DataCollectors")!;
         }
 
-        foreach (XmlNode datacollector in oldDatacollectorNodes)
+        foreach (XmlNode dataCollector in oldDataCollectorNodes)
         {
-            dataCollectorsNode.AppendChild(newXmlDoc.ImportNode(datacollector, deep: true));
+            dataCollectorsNode.AppendChild(newXmlDoc.ImportNode(dataCollector, deep: true));
         }
     }
 
@@ -399,7 +406,7 @@ private static void AddDataCollectorNodes(XmlNodeList oldDatacollectorNodes, Xml
     /// <param name="newXmlDoc">Xml doc to process</param>
     private static void AddRunTimeoutNode(string runTimeout, XmlDocument newXmlDoc)
     {
-        if (newXmlDoc?.DocumentElement == null)
+        if (newXmlDoc.DocumentElement == null)
         {
             return;
         }

From 97abc20bc96ec016ba3de4774bab83bea1e47250 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Amaury=20Lev=C3=A9?= <amauryleve@microsoft.com>
Date: Mon, 22 Aug 2022 13:46:58 +0200
Subject: [PATCH 17/17] Simplify nullability

---
 .../EventLogDataCollector.cs                    | 17 ++++++-----------
 1 file changed, 6 insertions(+), 11 deletions(-)

diff --git a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs
index bacd5e18e0..6d93832971 100644
--- a/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs
+++ b/src/DataCollectors/Microsoft.TestPlatform.Extensions.EventLogCollector/EventLogDataCollector.cs
@@ -566,26 +566,21 @@ private void ConfigureMaxEntries(CollectorNameValueConfigurationManager collecto
         }
     }
 
-    [return: NotNull]
     private EventLogSessionContext GetEventLogSessionContext(DataCollectionContext dataCollectionContext)
     {
-        EventLogSessionContext? eventLogSessionContext;
-        bool eventLogContainerFound;
         lock (ContextMap)
         {
-            eventLogContainerFound = ContextMap.TryGetValue(dataCollectionContext, out eventLogSessionContext);
+            if (ContextMap.TryGetValue(dataCollectionContext, out var eventLogSessionContext))
+            {
+                return eventLogSessionContext;
+            }
         }
 
-        if (!eventLogContainerFound)
-        {
-            string msg = string.Format(
+        string msg = string.Format(
                 CultureInfo.CurrentCulture,
                 Resource.ContextNotFoundException,
                 dataCollectionContext.ToString());
-            throw new EventLogCollectorException(msg, null);
-        }
-
-        return eventLogSessionContext!;
+        throw new EventLogCollectorException(msg, null);
     }
 
 }
